"use strict";

require("core-js/modules/es.string.replace");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.spawnError = spawnError;
exports.invariant = invariant;
exports.spawnUnknownSwitchCaseError = spawnUnknownSwitchCaseError;
exports.spawnAbstractMethodError = spawnAbstractMethodError;

// If errorOriginFn is specified, all frames above and including the call to errorOriginFn
// will be omitted from the stack trace.

/**
 * @internal
 */
function spawnErrorWithOriginOmittedFromStackTrace(errorMessageFormat, errorMessageArgs, errorOriginFn) {
  var safeMessage = errorMessageFormat;
  var argIndex = 0;
  var formattedMessage = errorMessageFormat.replace(/%s/g, () => {
    var arg = errorMessageArgs ? errorMessageArgs[argIndex] : undefined;
    argIndex++;
    return String(arg);
  });
  var err = new Error(formattedMessage); // captureStackTrace is only available on v8. It captures the current stack trace
  // and sets the .stack property of the first argument. It will omit all frames above
  // and including "errorOriginFn", which is useful for hiding implementation details of our
  // error throwing helpers (e.g. assert and spawn variants).

  if (Error.captureStackTrace && errorOriginFn) {
    Error.captureStackTrace(err, errorOriginFn);
  }

  Object.defineProperty(err, '__safeMessage', {
    configurable: false,
    enumerable: false,
    value: safeMessage,
    writable: false
  });
  return err;
}
/**
 * @hidden
 */


function spawnError(errorMessageFormat) {
  for (var _len = arguments.length, errorMessageArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    errorMessageArgs[_key - 1] = arguments[_key];
  }

  return spawnErrorWithOriginOmittedFromStackTrace(errorMessageFormat, errorMessageArgs, spawnError);
}
/**
 * An alternative to facebook's invariant that's safe to use with base data
 *
 * @hidden
 */


function invariant(condition, errorMessageFormat) {
  if (!condition) {
    for (var _len2 = arguments.length, errorMessageArgs = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
      errorMessageArgs[_key2 - 2] = arguments[_key2];
    }

    throw spawnErrorWithOriginOmittedFromStackTrace(errorMessageFormat, errorMessageArgs, invariant);
  }
}
/**
 * @internal
 */


function spawnUnknownSwitchCaseError(valueDescription, providedValue, key) {
  var providedValueKey = providedValue[key];
  var providedValueKeyString = providedValueKey !== null && providedValueKey !== undefined ? providedValueKey : 'null';
  return spawnErrorWithOriginOmittedFromStackTrace('Unknown value %s for %s', [providedValueKeyString, valueDescription], spawnUnknownSwitchCaseError);
}
/**
 * @internal
 */


function spawnAbstractMethodError() {
  return spawnErrorWithOriginOmittedFromStackTrace('Abstract method', undefined, spawnAbstractMethodError);
}
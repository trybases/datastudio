"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var React = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _global_config = _interopRequireDefault(require("./global_config"));

var _base = _interopRequireDefault(require("./models/base"));

var models = _interopRequireWildcard(require("./models/models"));

var _session = _interopRequireDefault(require("./models/session"));

var _mutations = _interopRequireDefault(require("./models/mutations"));

var _cursor = _interopRequireDefault(require("./models/cursor"));

var _viewport = _interopRequireDefault(require("./viewport"));

var UI = _interopRequireWildcard(require("./ui/ui"));

var _settings_button = _interopRequireDefault(require("./settings_button"));

var _undo_redo = _interopRequireDefault(require("./undo_redo"));

/** @hidden */

/** */
// NOTE: The version of React running in the Block SDK is controlled by the block.
// The SDK should not make too many assumptions about which version of React or
// ReactDOM is running.
// HACK: make sure React.PropTypes is defined. If the block is using a newer
// version of React, PropTypes won't be available, but a few SDK components
// try to reference it. Once grepping React.PropTypes in hyperbase doesn't
// return any matches, we can remove this hack.
if (!React.PropTypes) {
  React.PropTypes = _propTypes.default;
}
/**
 * @hidden
 * @example
 * ```js
 * import {runInfo} from '@airtable/blocks';
 * if (runInfo.isFirstRun) {
 *     // The current user just installed this block.
 *     // Take the opportunity to show any onboarding and set
 *     // sensible defaults if the user has permission.
 *     // For example, if the block relies on a table, it would
 *     // make sense to set that to cursor.activeTableId
 * }
 * ```
 */


/** @internal */
function defaultUpdateBatcher(applyUpdates) {
  applyUpdates();
}
/**
 * We document this manually.
 *
 * @hidden
 */


var BlockSdk =
/*#__PURE__*/
function () {
  /** @hidden */

  /**
   * NOTE: in most cases, we should pass the Airtable interface to models when we
   * construct them (to reduce usage of getSdk). But in some cases, that isn't
   * feasible (i.e. expandRecord, since that can be called directly from block code),
   * so we allow accessing it through getSdk().__airtableInterface for convenience.
   *
   * @internal
   */

  /** Storage for this block installation's configuration. */

  /** Represents the current Airtable {@link Base}. */

  /** Contains information about the current session. */

  /** @internal */

  /**
   * Contains the model classes, field types, view types, and utilities for
   * working with record coloring and record aggregation.
   */

  /**
   * Returns the ID for the current block installation.
   *
   * @example
   * ```js
   * import {installationId} from '@airtable/blocks';
   * console.log(installationId);
   * // => 'blifDutUr92OKwnUn'
   * ```
   */

  /** Controls the block's viewport. You can fullscreen the block and add size
   * constrains using `viewport`.
   */

  /** @hidden */

  /** Returns information about the active table, active view, and selected records. */

  /** React components, hooks, and UI helpers. */

  /**
   * Controls the block's {@link settingsButton settings button}.
   */

  /** @hidden */
  // When models are updated on the frontend, we want to batch them together and have React do a
  // single render.
  //
  // Without this, in sync-mode React (the current default), anything that triggers an update
  // (like .setState or .forceUpdate) will instantly, synchronously re-render. So if you have an
  // update that triggers multiple updates across your tree, you get multiple renders in an
  // unpredictable order. This is bad because it's unnecessary work and the update order can
  // contradict react's normal top-down data flow which can cause subtle bugs.
  //
  // We set _runWithUpdateBatching to ReactDOM.unstable_batchedUpdates to facilitate this. We
  // don't know for sure though that React is in use on the page, so we leave actually setting
  // this when the developer sets up their block with React, in UI.initializeBlock.

  /** @internal */

  /** @internal */
  function BlockSdk(airtableInterface) {
    (0, _classCallCheck2.default)(this, BlockSdk);
    (0, _defineProperty2.default)(this, "__airtableInterface", void 0);
    (0, _defineProperty2.default)(this, "globalConfig", void 0);
    (0, _defineProperty2.default)(this, "base", void 0);
    (0, _defineProperty2.default)(this, "session", void 0);
    (0, _defineProperty2.default)(this, "__mutations", void 0);
    (0, _defineProperty2.default)(this, "models", void 0);
    (0, _defineProperty2.default)(this, "installationId", void 0);
    (0, _defineProperty2.default)(this, "viewport", void 0);
    (0, _defineProperty2.default)(this, "runInfo", void 0);
    (0, _defineProperty2.default)(this, "cursor", void 0);
    (0, _defineProperty2.default)(this, "UI", void 0);
    (0, _defineProperty2.default)(this, "settingsButton", void 0);
    (0, _defineProperty2.default)(this, "undoRedo", void 0);
    (0, _defineProperty2.default)(this, "_runWithUpdateBatching", defaultUpdateBatcher);
    this.__airtableInterface = airtableInterface;
    airtableInterface.assertAllowedSdkPackageVersion("@airtable/blocks", BlockSdk.VERSION);
    var sdkInitData = airtableInterface.sdkInitData;
    this.globalConfig = new _global_config.default(sdkInitData.initialKvValuesByKey, airtableInterface);
    this.base = new _base.default(sdkInitData.baseData, airtableInterface);
    this.models = models;
    this.installationId = sdkInitData.blockInstallationId; // Bind the public methods on this class so users can import
    // just the method, e.g.
    // import {reload} from '@airtable/blocks';

    this.reload = this.reload.bind(this);
    this.viewport = new _viewport.default(sdkInitData.isFullscreen, airtableInterface);
    this.cursor = new _cursor.default(sdkInitData.baseData, airtableInterface);
    this.session = new _session.default(sdkInitData.baseData, airtableInterface);
    this.__mutations = new _mutations.default(airtableInterface, this.session, this.base, changes => this.__applyModelChanges(changes), updates => this.__applyGlobalConfigUpdates(updates));
    this.UI = UI;
    this.settingsButton = new _settings_button.default(airtableInterface);
    this.undoRedo = new _undo_redo.default(airtableInterface);
    this.runInfo = Object.freeze({
      isFirstRun: sdkInitData.isFirstRun,
      isDevelopmentMode: sdkInitData.isDevelopmentMode
    }); // Now that we've constructed our models, let's hook them up to realtime changes.

    this._registerHandlers(); // TODO: freeze this object before we ship the code editor.

  }
  /** @internal */


  (0, _createClass2.default)(BlockSdk, [{
    key: "__applyModelChanges",
    value: function __applyModelChanges(changes) {
      this._runWithUpdateBatching(() => {
        var changedBasePaths = this.base.__applyChangesWithoutTriggeringEvents(changes);

        var changedCursorKeys = this.cursor.__applyChangesWithoutTriggeringEvents(changes);

        var changedSessionKeys = this.session.__applyChangesWithoutTriggeringEvents(changes);

        this.base.__triggerOnChangeForChangedPaths(changedBasePaths);

        this.cursor.__triggerOnChangeForChangedKeys(changedCursorKeys);

        this.session.__triggerOnChangeForChangedKeys(changedSessionKeys);
      });
    }
    /** @internal */

  }, {
    key: "__applyGlobalConfigUpdates",
    value: function __applyGlobalConfigUpdates(updates) {
      this._runWithUpdateBatching(() => {
        this.globalConfig.__setMultipleKvPaths(updates);
      });
    }
    /** @internal */

  }, {
    key: "_registerHandlers",
    value: function _registerHandlers() {
      // base
      this.__airtableInterface.subscribeToModelUpdates((_ref) => {
        var changes = _ref.changes;

        this.__applyModelChanges(changes);
      }); // global config


      this.__airtableInterface.subscribeToGlobalConfigUpdates((_ref2) => {
        var updates = _ref2.updates;

        this.__applyGlobalConfigUpdates(updates);
      }); // settings button


      this.__airtableInterface.subscribeToSettingsButtonClick(() => {
        if (this.settingsButton.isVisible) {
          this._runWithUpdateBatching(() => {
            // Since there's an async gap when communicating with liveapp,
            // no-op if the button has been hidden since it was clicked.
            this.settingsButton.__onClick();
          });
        }
      }); // viewport


      this.__airtableInterface.subscribeToEnterFullScreen(() => {
        this._runWithUpdateBatching(() => {
          this.viewport.__onEnterFullscreen();
        });
      });

      this.__airtableInterface.subscribeToExitFullScreen(() => {
        this._runWithUpdateBatching(() => {
          this.viewport.__onExitFullscreen();
        });
      });

      this.__airtableInterface.subscribeToFocus(() => {
        this._runWithUpdateBatching(() => {
          this.viewport.__focus();
        });
      });
    }
    /**
     * Call this function to reload your block.
     *
     * @example
     * ```js
     * import React from 'react';
     * import {reload} from '@airtable/blocks';
     * import {Button, initializeBlock} from '@airtable/blocks/ui';
     * function MyBlock() {
     *     return <Button onClick={() => reload()}>Reload</Button>;
     * }
     * initializeBlock(() => <MyBlock />);
     * ```
     */

  }, {
    key: "reload",
    value: function reload() {
      this.__airtableInterface.reloadFrame();
    }
    /** @internal */

  }, {
    key: "__setBatchedUpdatesFn",
    value: function __setBatchedUpdatesFn(newUpdateBatcher) {
      this._runWithUpdateBatching = newUpdateBatcher;
    }
    /**
     * @internal
     */

  }, {
    key: "__appInterface",
    get: function get() {
      return this.base._baseData.appInterface;
    }
  }]);
  return BlockSdk;
}();

exports.default = BlockSdk;
(0, _defineProperty2.default)(BlockSdk, "VERSION", "0.0.44");
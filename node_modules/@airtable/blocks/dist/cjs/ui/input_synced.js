"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.symbol");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.object.get-own-property-descriptors");

require("core-js/modules/web.dom-collections.for-each");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var React = _interopRequireWildcard(require("react"));

var _error_utils = require("../error_utils");

var _input = _interopRequireWildcard(require("./input"));

var _use_synced = _interopRequireDefault(require("./use_synced"));

var _global_config_synced_component_helpers = _interopRequireDefault(require("./global_config_synced_component_helpers"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * A wrapper around the {@link Input} component that syncs with {@link GlobalConfig}.
 *
 * [[ Story id="input--example-synced" title="Synced input example" ]]
 *
 * @docsPath UI/components/InputSynced
 * @groupPath UI/components/Input
 * @component
 */
var InputSynced = (props, ref) => {
  var globalConfigKey = props.globalConfigKey,
      _props$type = props.type,
      type = _props$type === void 0 ? _input.SupportedInputType.text : _props$type,
      disabled = props.disabled,
      _onChange = props.onChange,
      restOfProps = (0, _objectWithoutProperties2.default)(props, ["globalConfigKey", "type", "disabled", "onChange"]);

  var _useSynced = (0, _use_synced.default)(globalConfigKey),
      _useSynced2 = (0, _slicedToArray2.default)(_useSynced, 3),
      value = _useSynced2[0],
      setValue = _useSynced2[1],
      canSetValue = _useSynced2[2];

  var inputValue;

  if (value === null || value === undefined) {
    // If an input gets null or undefined for value, React treats it as uncontrolled
    // and will throw warnings when it becomes controlled.
    inputValue = '';
  } else if (typeof value === 'string') {
    inputValue = value;
  } else {
    throw (0, _error_utils.spawnError)('InputSynced only works with a global config value that is a string, null or undefined.');
  }

  return React.createElement(_input.default, (0, _extends2.default)({}, restOfProps, {
    ref: ref,
    disabled: disabled || !canSetValue,
    onChange: e => {
      setValue(e.target.value);

      if (_onChange) {
        _onChange(e);
      }
    },
    value: inputValue,
    type: type
  }));
};

var ForwardedRefInputSynced = React.forwardRef(InputSynced);
ForwardedRefInputSynced.propTypes = _objectSpread({
  globalConfigKey: _global_config_synced_component_helpers.default.globalConfigKeyPropType
}, _input.sharedInputPropTypes);
ForwardedRefInputSynced.displayName = 'InputSynced';
var _default = ForwardedRefInputSynced;
exports.default = _default;
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.symbol");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.object.get-own-property-descriptors");

require("core-js/modules/web.dom-collections.for-each");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.CellRenderer = exports.cellRendererStylePropTypes = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _emotion = require("emotion");

var React = _interopRequireWildcard(require("react"));

var _core = require("@styled-system/core");

var _get_sdk = _interopRequireDefault(require("../get_sdk"));

var _error_utils = require("../error_utils");

var _record = _interopRequireDefault(require("../models/record"));

var _field = _interopRequireDefault(require("../models/field"));

var _with_hooks = _interopRequireDefault(require("./with_hooks"));

var _use_watchable = _interopRequireDefault(require("./use_watchable"));

var _system = require("./system");

var _use_styled_system = _interopRequireDefault(require("./use_styled_system"));

var _with_styled_system = require("./with_styled_system");

var _tooltip_anchor_props = require("./types/tooltip_anchor_props");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var styleParser = (0, _core.compose)(_system.display, _system.flexItemSet, _system.margin, _system.maxWidth, _system.minWidth, _system.positionSet, _system.width);

var cellRendererStylePropTypes = _objectSpread({}, _system.displayPropTypes, {}, _system.flexItemSetPropTypes, {}, _system.marginPropTypes, {}, _system.maxWidthPropTypes, {}, _system.minWidthPropTypes, {}, _system.positionSetPropTypes, {}, _system.widthPropTypes);
/**
 * Props for the {@link CellRenderer} component. Also accepts:
 * * {@link CellRendererStyleProps}
 *
 * @docsPath UI/components/CellRenderer
 * @noInheritDoc
 */


exports.cellRendererStylePropTypes = cellRendererStylePropTypes;

/**
 * Displays the contents of a cell given a field and record.
 *
 * [[ Story id="cellrenderer--example" title="Cell renderer example" ]]
 *
 * @component
 * @docsPath UI/components/CellRenderer
 */
var CellRenderer =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2.default)(CellRenderer, _React$Component);

  /** @hidden */

  /** @hidden */

  /** @hidden */
  function CellRenderer(props) {
    var _this;

    (0, _classCallCheck2.default)(this, CellRenderer);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(CellRenderer).call(this, props));

    _this._validateProps(props);

    return _this;
  }
  /** @hidden */


  (0, _createClass2.default)(CellRenderer, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      this._validateProps(nextProps);
    }
    /** @internal */

  }, {
    key: "_validateProps",
    value: function _validateProps(props) {
      if (props.record && !props.record.isDeleted && !props.field.isDeleted && props.record.parentTable.id !== props.field.parentTable.id) {
        throw (0, _error_utils.spawnError)('CellRenderer: record %s and field %s do not have the same parent table', props.record.parentTable.id, props.field.parentTable.id);
      }
    }
    /** @hidden */

  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          record = _this$props.record,
          cellValue = _this$props.cellValue,
          field = _this$props.field,
          shouldWrap = _this$props.shouldWrap,
          onMouseEnter = _this$props.onMouseEnter,
          onMouseLeave = _this$props.onMouseLeave,
          onClick = _this$props.onClick,
          className = _this$props.className,
          style = _this$props.style,
          cellClassName = _this$props.cellClassName,
          cellStyle = _this$props.cellStyle;

      if (field.isDeleted) {
        return null;
      }

      var airtableInterface = (0, _get_sdk.default)().__airtableInterface;

      var appInterface = (0, _get_sdk.default)().__appInterface;

      var cellValueToRender;

      if (record) {
        if (cellValue !== undefined) {
          // eslint-disable-next-line
          console.warn('CellRenderer was given both record and cellValue, choosing to render record value');
        }

        if (record.isDeleted) {
          return null;
        }

        cellValueToRender = record.getCellValue(field.id);
      } else {
        // NOTE: this will not work if you want to render a cell value for
        // foreign record, single/multi select, or single/multi collaborator
        // fields and the cell value is not *currently* valid for that field.
        // i.e. if you want to render a foreign record for a record that
        // does not yet exist, this will throw.
        // TODO: handle "preview" cell values that are not yet valid in the given field
        // but that *could* be.
        // To validate public cell values, we only have validateCellValueForUpdate
        // However, this is not implemented for computed fields (since you can't update them)
        // so we just skip the check.
        // TODO(emma): actually check this somehow.
        if (!field.isComputed) {
          var validationResult = airtableInterface.fieldTypeProvider.validateCellValueForUpdate(appInterface, cellValue, null, field._data);

          if (!validationResult.isValid) {
            throw (0, _error_utils.spawnError)('Cannot render invalid cell value %s: %s', cellValue, validationResult.reason);
          }
        }

        cellValueToRender = cellValue;
      }

      var _airtableInterface$fi = airtableInterface.fieldTypeProvider.getCellRendererData(appInterface, cellValueToRender, field._data, !!shouldWrap),
          cellValueHtml = _airtableInterface$fi.cellValueHtml,
          attributes = _airtableInterface$fi.attributes;

      return React.createElement("div", {
        // TODO (stephen): remove tooltip anchor props
        onMouseEnter: onMouseEnter,
        onMouseLeave: onMouseLeave,
        onClick: onClick,
        className: (0, _emotion.cx)('baymax', className),
        style: style
      }, React.createElement("div", (0, _extends2.default)({}, attributes, {
        className: (0, _emotion.cx)('cell read', cellClassName),
        style: cellStyle,
        dangerouslySetInnerHTML: {
          __html: cellValueHtml
        }
      })));
    }
  }]);
  return CellRenderer;
}(React.Component);

exports.CellRenderer = CellRenderer;
(0, _defineProperty2.default)(CellRenderer, "propTypes", _objectSpread({
  // NOTE: must pass in one of record or cellValue. It will default to using
  // the record if one is passed in, and cellValue otherwise.
  record: _propTypes.default.instanceOf(_record.default),
  cellValue: _propTypes.default.any,
  field: _propTypes.default.instanceOf(_field.default).isRequired,
  shouldWrap: _propTypes.default.bool,
  className: _propTypes.default.string,
  style: _propTypes.default.object,
  cellClassName: _propTypes.default.string,
  cellStyle: _propTypes.default.object
}, _tooltip_anchor_props.tooltipAnchorPropTypes, {}, cellRendererStylePropTypes));
(0, _defineProperty2.default)(CellRenderer, "defaultProps", {
  shouldWrap: true
});

var _default = (0, _with_hooks.default)(CellRenderer, props => {
  var _splitStyleProps = (0, _with_styled_system.splitStyleProps)(props, styleParser.propNames, {
    display: 'block'
  }),
      styleProps = _splitStyleProps.styleProps,
      nonStyleProps = _splitStyleProps.nonStyleProps;

  var className = nonStyleProps.className;
  var classNameForStyleProps = (0, _use_styled_system.default)(styleProps, styleParser);
  (0, _use_watchable.default)(props.record, ["cellValueInField:".concat(props.field.id)]);
  (0, _use_watchable.default)(props.field, ['type', 'options']);
  return {
    className: (0, _emotion.cx)(classNameForStyleProps, className)
  };
});

exports.default = _default;
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useSettingsButton;

var _react = require("react");

var _get_sdk = _interopRequireDefault(require("../get_sdk"));

var _use_watchable = _interopRequireDefault(require("./use_watchable"));

/** @module @airtable/blocks/ui: useSettingsButton */

/** */

/**
 * A hook for using the settings button that lives outside the block's viewport. It will show
 * the settings button (hidden by default) and call the provided callback whenever the settings
 * button is clicked. It will also re-render your component when the settings button is clicked.
 *
 * @param onClickCallback A callback to call when the button is clicked.
 *
 * @example
 * ```js
 * import {useSettingsButton} from '@airtable/blocks/ui';
 * import {useState} from 'react';
 *
 * function ComponentWithSettings() {
 *      const [isShowingSettings, setIsShowingSettings] = useState(false);
 *      useSettingsButton(function() {
 *          setIsShowingSettings(!isShowingSettings);
 *      });
 *
 *      if (isShowingSettings) {
 *          return <SettingsComponent />
 *      }
 *      return <MainComponent />
 * }
 * ```
 * @docsPath UI/hooks/useSettingsButton
 * @hook
 */
function useSettingsButton(onClickCallback) {
  (0, _react.useEffect)(() => {
    var _getSdk = (0, _get_sdk.default)(),
        settingsButton = _getSdk.settingsButton;

    settingsButton.show(); // Hide the button when the component using this hook is unmounted.

    return () => {
      settingsButton.hide();
    };
  }, []); // Only set the button to be visible once.

  var _getSdk2 = (0, _get_sdk.default)(),
      settingsButton = _getSdk2.settingsButton;

  (0, _use_watchable.default)(settingsButton, ['click'], onClickCallback);
}
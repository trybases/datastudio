"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.symbol");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.object.get-own-property-descriptors");

require("core-js/modules/web.dom-collections.for-each");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.choiceTokenStylePropTypes = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _emotion = require("emotion");

var React = _interopRequireWildcard(require("react"));

var _core = require("@styled-system/core");

var _baymax_utils = require("./baymax_utils");

var _box = _interopRequireDefault(require("./box"));

var _text = _interopRequireDefault(require("./text"));

var _use_styled_system = _interopRequireDefault(require("./use_styled_system"));

var _use_text_color_for_background_color = _interopRequireDefault(require("./use_text_color_for_background_color"));

var _system = require("./system");

var _tooltip_anchor_props = require("./types/tooltip_anchor_props");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var styleParser = (0, _core.compose)(_system.flexItemSet, _system.positionSet, _system.margin);

var choiceTokenStylePropTypes = _objectSpread({}, _system.flexItemSetPropTypes, {}, _system.positionSetPropTypes, {}, _system.marginPropTypes);

exports.choiceTokenStylePropTypes = choiceTokenStylePropTypes;
var DEFAULT_CHOICE_COLOR = 'gray';
/** An option from a select field. You should not create these objects from scratch, but should instead grab them from base data. */

/**
 * A component that shows a single choice in a small token, to be displayed inline or in a list of choices.
 *
 * [[ Story id="choicetoken--example" title="Choice token example" ]]
 *
 * @component
 * @docsPath UI/components/ChoiceToken
 */
var ChoiceToken = props => {
  var choice = props.choice,
      onMouseEnter = props.onMouseEnter,
      onMouseLeave = props.onMouseLeave,
      onClick = props.onClick,
      hasOnClick = props.hasOnClick,
      className = props.className,
      style = props.style,
      styleProps = (0, _objectWithoutProperties2.default)(props, ["choice", "onMouseEnter", "onMouseLeave", "onClick", "hasOnClick", "className", "style"]);
  var classNameForStyleProps = (0, _use_styled_system.default)(styleProps, styleParser);
  var color = choice.color || DEFAULT_CHOICE_COLOR;
  var textColor = (0, _use_text_color_for_background_color.default)(color);
  return React.createElement(_box.default, {
    className: (0, _emotion.cx)(className, classNameForStyleProps),
    style: style,
    display: "inline-block"
  }, React.createElement(_box.default // TODO (stephen): remove tooltip anchor props
  , {
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave,
    onClick: onClick,
    className: (0, _baymax_utils.baymax)('print-color-exact align-top'),
    backgroundColor: color,
    minWidth: "18px",
    height: "18px",
    borderRadius: "circle",
    paddingX: 2
  }, React.createElement(_text.default, {
    className: (0, _baymax_utils.baymax)('truncate'),
    textColor: textColor,
    fontSize: "13px",
    fontWeight: "400",
    lineHeight: 1.5
  }, choice.name)));
};

ChoiceToken.propTypes = _objectSpread({
  choice: _propTypes.default.shape({
    id: _propTypes.default.string.isRequired,
    name: _propTypes.default.string.isRequired,
    color: _propTypes.default.string
  }).isRequired,
  style: _propTypes.default.object,
  className: _propTypes.default.string
}, _tooltip_anchor_props.tooltipAnchorPropTypes, {}, choiceTokenStylePropTypes);
var _default = ChoiceToken;
exports.default = _default;
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.to-string");

require("core-js/modules/web.dom-collections.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isSelectOptionValue = isSelectOptionValue;
exports.optionValueToString = optionValueToString;
exports.stringToOptionValue = stringToOptionValue;
exports.validateOptions = exports.selectOptionValuePropType = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

/** @module @airtable/blocks/ui: Select */

/** */

/** @internal */
function isSelectOptionValue(value) {
  return value === null || value === undefined || typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean';
}
/**
 * A select option for {@link Select}, {@link TablePicker}, {@link ViewPicker}, {@link FieldPicker}, and their `Synced` counterparts.
 */


// We cast the following prop type because we allow `null` as a valid option.
var selectOptionValuePropType = _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.bool]);

exports.selectOptionValuePropType = selectOptionValuePropType;

var validateOptions = options => {
  if (options) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = options[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var option = _step.value;

        // These are hard errors because we can't guarantee that other values
        // will be JSON-encodable. And undefined gets coerced to the string
        // "undefined" which is confusing.
        if (typeof option.value === 'object' && option.value !== null) {
          return {
            isValid: false,
            reason: 'option value must be a string, number, boolean, null, or undefined. Got an object.'
          };
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  return {
    isValid: true
  };
};
/** @internal */


exports.validateOptions = validateOptions;

function optionValueToString(value) {
  var valueJson = JSON.stringify(value === undefined ? {
    isUndefined: true
  } : {
    notUndefinedValue: value
  });
  return valueJson;
}
/** @internal */


function stringToOptionValue(valueJson) {
  var parsed = JSON.parse(valueJson);
  var value = parsed.isUndefined ? null : parsed.notUndefinedValue;
  return value;
}
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.symbol");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.object.get-own-property-descriptors");

require("core-js/modules/web.dom-collections.for-each");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.sharedIconPropTypes = exports.iconStylePropTypes = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _core = require("@styled-system/core");

var _emotion = require("emotion");

var _use_styled_system = _interopRequireDefault(require("./use_styled_system"));

var _system = require("./system");

var _tooltip_anchor_props = require("./types/tooltip_anchor_props");

var _icon_config = require("./icon_config");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var styleParser = (0, _core.compose)(_system.flexItemSet, _system.positionSet, _system.margin, _system.width, _system.height);

var iconStylePropTypes = _objectSpread({}, _system.flexItemSetPropTypes, {}, _system.positionSetPropTypes, {}, _system.marginPropTypes);
/**
 * Props shared between the {@link Icon} and {@link FieldIcon} components.
 *
 * @noInheritDoc
 */
// TODO (stephen): inherit shared props without inheriting style props


exports.iconStylePropTypes = iconStylePropTypes;

var sharedIconPropTypes = _objectSpread({
  size: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  fillColor: _propTypes.default.string,
  className: _propTypes.default.string,
  style: _propTypes.default.object,
  pathClassName: _propTypes.default.string,
  pathStyle: _propTypes.default.object
}, _tooltip_anchor_props.tooltipAnchorPropTypes, {}, iconStylePropTypes);
/**
 * Props for the {@link Icon} component. Also accepts:
 * * {@link IconStyleProps}
 */


exports.sharedIconPropTypes = sharedIconPropTypes;

/**
 * A vector icon from the Airtable icon set.
 *
 * [[ Story id="icon--example" title="Icon example" height="576px"]]
 *
 * @component
 * @docsPath UI/components/Icon
 */
var Icon = (props, ref) => {
  var name = props.name,
      _props$size = props.size,
      size = _props$size === void 0 ? 16 : _props$size,
      _props$fillColor = props.fillColor,
      fillColor = _props$fillColor === void 0 ? 'currentColor' : _props$fillColor,
      onMouseEnter = props.onMouseEnter,
      onMouseLeave = props.onMouseLeave,
      onClick = props.onClick,
      hasOnClick = props.hasOnClick,
      className = props.className,
      style = props.style,
      pathClassName = props.pathClassName,
      pathStyle = props.pathStyle,
      styleProps = (0, _objectWithoutProperties2.default)(props, ["name", "size", "fillColor", "onMouseEnter", "onMouseLeave", "onClick", "hasOnClick", "className", "style", "pathClassName", "pathStyle"]);
  var classNameForStyleProps = (0, _use_styled_system.default)(_objectSpread({}, styleProps, {
    width: size,
    height: size
  }), styleParser); // TODO (jay): Figure out how we can support micro icons when the size is in relative ems.

  var isMicro = typeof size === 'string' ? false : size <= 12;
  var iconName = "".concat(name).concat(isMicro ? 'Micro' : '');
  var pathData = _icon_config.allIconPaths[iconName];

  if (!pathData) {
    return null;
  }

  var originalSize = isMicro ? 12 : 16;
  return _react.default.createElement("svg", {
    ref: ref,
    viewBox: "0 0 ".concat(originalSize, " ").concat(originalSize) // TODO (stephen): remove tooltip anchor props
    ,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave,
    onClick: onClick,
    className: (0, _emotion.cx)(classNameForStyleProps, className),
    style: _objectSpread({
      shapeRendering: 'geometricPrecision'
    }, style)
  }, _react.default.createElement("path", {
    fillRule: "evenodd",
    className: pathClassName,
    style: pathStyle,
    fill: fillColor,
    d: pathData
  }));
};

var ForwardedRefIcon = _react.default.forwardRef(Icon);

ForwardedRefIcon.propTypes = _objectSpread({
  name: _icon_config.iconNamePropType.isRequired
}, sharedIconPropTypes);
ForwardedRefIcon.displayName = 'Icon';
var _default = ForwardedRefIcon;
exports.default = _default;
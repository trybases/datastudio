"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.number.constructor");

require("core-js/modules/es.object.get-own-property-descriptors");

require("core-js/modules/es.object.to-string");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.RecordCardList = exports.recordCardListStylePropTypes = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _reactWindow = require("react-window");

var _core = require("@styled-system/core");

var _error_utils = require("../error_utils");

var _record = _interopRequireDefault(require("../models/record"));

var _field = _interopRequireDefault(require("../models/field"));

var _view = _interopRequireDefault(require("../models/view"));

var _record_card = _interopRequireDefault(require("./record_card"));

var _box = _interopRequireDefault(require("./box"));

var _create_detect_element_resize = _interopRequireDefault(require("./create_detect_element_resize"));

var _with_styled_system = _interopRequireDefault(require("./with_styled_system"));

var _system = require("./system");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var RECORD_CARD_ROW_HEIGHT = 80;
var RECORD_CARD_SPACING = 10;
/** @internal */

/**
 * Item renderer component for react-window FixedSizeList. Responsible for rendering each
 * individual record card item, identified by the index prop.
 *
 * @param props
 * @internal
 */
function RecordCardItemRenderer(props) {
  var _props$data = props.data,
      records = _props$data.records,
      fields = _props$data.fields,
      view = _props$data.view,
      width = _props$data.width,
      attachmentCoverField = _props$data.attachmentCoverField,
      onClick = _props$data.onClick,
      onMouseEnter = _props$data.onMouseEnter,
      onMouseLeave = _props$data.onMouseLeave;
  var itemIndex = props.index,
      style = props.style,
      className = props.className;
  var record = records[itemIndex]; // Ensure that expandRecordOptions.records only contains Records, not RecordDefs. RecordCardList
  // can be given either Records or RecordDefs, but the `opts` argument in `expandRecord` only
  // accepts an array of Records.

  var filteredRecords = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = records[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var currentRecord = _step.value;

      if (currentRecord instanceof _record.default) {
        filteredRecords.push(currentRecord);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  if (filteredRecords.length !== records.length && filteredRecords.length !== 0) {
    throw (0, _error_utils.spawnError)("RecordCardList's props.records should not contain a mix of Record and RecordDef");
  }

  return React.createElement(_record_card.default, {
    record: record,
    fields: fields,
    view: view,
    attachmentCoverField: attachmentCoverField // Explicitly pass `onClick` if it is falsey because RecordCard handles null & undefined differently
    ,
    onClick: onClick ? () => onClick(record, itemIndex) : undefined,
    expandRecordOptions: filteredRecords.length > 0 ? {
      records: filteredRecords
    } : null,
    onMouseEnter: onMouseEnter ? () => onMouseEnter(record, itemIndex) : undefined,
    onMouseLeave: onMouseLeave ? () => onMouseLeave(record, itemIndex) : undefined,
    width: width,
    height: RECORD_CARD_ROW_HEIGHT,
    className: className // Adjustments to top and left made to properly position the cards in the list. FixedSizeList doesn't
    // differentiate between content & gutter for each "item" it renders. See https://github.com/bvaughn/react-window#can-i-add-gutter-or-padding-between-items
    ,
    style: _objectSpread({}, style, {
      left: Number(style.left) + RECORD_CARD_SPACING,
      top: Number(style.top) + RECORD_CARD_SPACING
    })
  });
}

RecordCardItemRenderer.propTypes = {
  data: _propTypes.default.shape({
    records: _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.instanceOf(_record.default), _propTypes.default.object])).isRequired,
    fields: _propTypes.default.arrayOf(_propTypes.default.instanceOf(_field.default)),
    view: _propTypes.default.instanceOf(_view.default),
    attachmentCoverField: _propTypes.default.instanceOf(_field.default),
    onClick: _propTypes.default.func,
    onMouseEnter: _propTypes.default.func,
    onMouseLeave: _propTypes.default.func,
    width: _propTypes.default.number.isRequired,
    className: _propTypes.default.string,
    style: _propTypes.default.object
  }),
  index: _propTypes.default.number.isRequired,
  style: _propTypes.default.object,
  className: _propTypes.default.string
};
/**
 * Utility function to measure scrollbar size.
 * Used to correctly calculate the width for record cards in the container.
 *
 * @internal
 */

function getScrollbarWidth() {
  var scrollDiv = document.createElement('div');
  scrollDiv.style.position = 'absolute';
  scrollDiv.style.top = '-9999px';
  scrollDiv.style.width = '50px';
  scrollDiv.style.height = '50px';
  scrollDiv.style.overflow = 'scroll';
  var body = document.body;
  (0, _error_utils.invariant)(body, 'no document body to measure scrollbar');
  body.appendChild(scrollDiv);
  var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
  body.removeChild(scrollDiv);
  return scrollbarWidth;
}
/**
 * @internal
 */


/**
 * Wrapper component for RecordCardList's window (passed to FixedSizeList).
 *
 * This is used to force FixedSizeList (`react-window`) to include padding at both top and bottom
 * of the record card list. The FixedSizeList accounts for card padding on every card (baked into
 * `itemSize`), but this doesn't account for the 1 extra padding required beneath the last card.
 * (ie, if we have 10 cards, the height needs to be (10 * card_height) + (11 * card_padding)).
 *
 * @internal
 */
var innerRecordCardListWindow = React.forwardRef((props, ref) => {
  var style = props.style,
      children = props.children;
  return React.createElement("div", {
    ref: ref // Height adjustment required to account for the spacing between the last item and the bottom of the list container.
    // See https://github.com/bvaughn/react-window#can-i-add-padding-to-the-top-and-bottom-of-a-list
    ,
    style: _objectSpread({}, style, {
      height: Number(style.height) + RECORD_CARD_SPACING
    })
  }, children);
});
/**
 * Scroll event for {@link RecordCardList}.
 */

var styleParser = (0, _core.compose)(_system.dimensionsSet, _system.flexItemSet, _system.positionSet, _system.margin);

var recordCardListStylePropTypes = _objectSpread({}, _system.dimensionsSetPropTypes, {}, _system.flexItemSetPropTypes, {}, _system.positionSetPropTypes, {}, _system.marginPropTypes);
/** @hidden */


exports.recordCardListStylePropTypes = recordCardListStylePropTypes;

/**
 * Scrollable list of record cards.
 *
 * [[ Story id="recordcardlist--example" title="RecordCardList example" height="560px" ]]
 *
 * @docsPath UI/components/RecordCardList
 * @component
 */
var RecordCardList =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2.default)(RecordCardList, _React$Component);

  /** @hidden */

  /** @internal */

  /** @internal */

  /** @internal */

  /** @internal */

  /** @internal */

  /** @hidden */
  function RecordCardList(props) {
    var _this;

    (0, _classCallCheck2.default)(this, RecordCardList);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(RecordCardList).call(this, props));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_container", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_cardList", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_cardListInnerWindow", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_detectElementResize", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_scrollbarWidth", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_updateCardListSizeIfNeeded", () => {
      (0, _error_utils.invariant)(_this._container.current, 'No container to update card list size');

      var _this$_container$curr = _this._container.current.getBoundingClientRect(),
          cardListWidth = _this$_container$curr.width,
          cardListHeight = _this$_container$curr.height;

      (0, _error_utils.invariant)(_this._cardListInnerWindow.current, 'No card list inner window to measure scroll height');
      var isScrollbarVisible = _this._cardListInnerWindow.current.scrollHeight > cardListHeight;

      if (_this.state.cardListWidth !== cardListWidth || _this.state.cardListHeight !== cardListHeight || _this.state.isScrollbarVisible !== isScrollbarVisible) {
        _this.setState({
          cardListWidth,
          cardListHeight,
          isScrollbarVisible
        });
      }
    });
    _this._container = React.createRef();
    _this._cardList = React.createRef();
    _this._cardListInnerWindow = React.createRef();
    _this._detectElementResize = (0, _create_detect_element_resize.default)();
    _this._scrollbarWidth = getScrollbarWidth();
    _this.state = {
      cardListWidth: 0,
      cardListHeight: 0,
      isScrollbarVisible: false
    };
    return _this;
  }
  /** @hidden */


  (0, _createClass2.default)(RecordCardList, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      (0, _error_utils.invariant)(this._container.current, 'No container to detect resize on');

      this._detectElementResize.addResizeListener(this._container.current, this._updateCardListSizeIfNeeded);

      this._updateCardListSizeIfNeeded();
    }
    /** @hidden */

  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this._container.current) {
        this._detectElementResize.removeResizeListener(this._container.current, this._updateCardListSizeIfNeeded);
      }
    }
    /** @hidden */

  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      // If the number of records change, we may need to adjust card widths if a scrollbar
      // now exists (or no longer exists)
      if (this.props.records.length !== prevProps.records.length) {
        this._updateCardListSizeIfNeeded();
      }
    } // Functionality for `getScrollTopForRecordAtIndex` and `scrollTop` getter/setter was
    // removed when migrating from DynamicDraw => react-window, which were not being used
    // by any consuming component at the time of migration.

    /** @hidden */

  }, {
    key: "scrollToRecordAtIndex",
    value: function scrollToRecordAtIndex(recordIndex) {
      (0, _error_utils.invariant)(this._cardList.current, 'No card list to scroll');

      this._cardList.current.scrollToItem(recordIndex);
    }
    /** @internal */

  }, {
    key: "render",

    /** @hidden */
    value: function render() {
      var _this$props$onRecordM, _this$props$onRecordM2;

      var _this$props = this.props,
          records = _this$props.records,
          fields = _this$props.fields,
          view = _this$props.view,
          attachmentCoverField = _this$props.attachmentCoverField,
          className = _this$props.className,
          style = _this$props.style;
      var itemData = {
        records,
        fields,
        view,
        width: this.state.cardListWidth - 2 * RECORD_CARD_SPACING - (this.state.isScrollbarVisible ? this._scrollbarWidth : 0),
        attachmentCoverField,
        onClick: this.props.onRecordClick,
        onMouseEnter: (_this$props$onRecordM = this.props.onRecordMouseEnter) !== null && _this$props$onRecordM !== void 0 ? _this$props$onRecordM : null,
        onMouseLeave: (_this$props$onRecordM2 = this.props.onRecordMouseLeave) !== null && _this$props$onRecordM2 !== void 0 ? _this$props$onRecordM2 : null,
        style: {},
        className: ''
      };
      return React.createElement(_box.default, {
        ref: this._container,
        className: className,
        overflow: "hidden",
        height: "100%",
        style: style
      }, React.createElement(_reactWindow.FixedSizeList, {
        outerRef: this._cardList,
        width: this.state.cardListWidth,
        height: this.state.cardListHeight,
        innerElementType: innerRecordCardListWindow,
        innerRef: this._cardListInnerWindow,
        itemData: itemData,
        itemCount: this.props.records.length,
        itemKey: (index, data) => data.records[index].id,
        itemSize: RECORD_CARD_ROW_HEIGHT + RECORD_CARD_SPACING,
        onScroll: this.props.onScroll
      }, // TODO(alex): figure out why this needs a cast to any - something to do with prop-types?
      RecordCardItemRenderer));
    }
  }]);
  return RecordCardList;
}(React.Component);

exports.RecordCardList = RecordCardList;
(0, _defineProperty2.default)(RecordCardList, "propTypes", {
  records: _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.instanceOf(_record.default), _propTypes.default.object])).isRequired,
  onScroll: _propTypes.default.func,
  onRecordClick: _propTypes.default.func,
  onRecordMouseEnter: _propTypes.default.func,
  onRecordMouseLeave: _propTypes.default.func,
  // Passed through to RecordCard.
  fields: _propTypes.default.arrayOf(_propTypes.default.instanceOf(_field.default).isRequired),
  view: _propTypes.default.instanceOf(_view.default),
  attachmentCoverField: _propTypes.default.instanceOf(_field.default),
  className: _propTypes.default.string,
  style: _propTypes.default.object
});

var _default = (0, _with_styled_system.default)(RecordCardList, styleParser, recordCardListStylePropTypes);

exports.default = _default;
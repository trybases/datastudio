"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.symbol");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.map");

require("core-js/modules/es.object.get-own-property-descriptors");

require("core-js/modules/web.dom-collections.for-each");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.sharedSelectButtonsPropTypes = exports.selectButtonsStylePropTypes = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _emotion = require("emotion");

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _core = require("@styled-system/core");

var _error_utils = require("../error_utils");

var _private_utils = require("../private_utils");

var _select_and_select_buttons_helpers = require("./select_and_select_buttons_helpers");

var _use_styled_system = _interopRequireDefault(require("./use_styled_system"));

var _use_theme = _interopRequireDefault(require("./theme/use_theme"));

var _css_helpers = _interopRequireDefault(require("./css_helpers"));

var _system = require("./system");

var _tooltip_anchor_props = require("./types/tooltip_anchor_props");

var _control_sizes = require("./control_sizes");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var SelectButtonsVariant = (0, _private_utils.createEnum)('default');
/** @internal */

function useSelectButtonsVariant() {
  var variant = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : SelectButtonsVariant.default;

  var _useTheme = (0, _use_theme.default)(),
      selectButtonsVariants = _useTheme.selectButtonsVariants;

  return selectButtonsVariants[variant];
}
/**
 * Style props shared between the {@link SelectButtons} and {@link SelectButtonsSynced} components. Accepts:
 * * {@link FlexItemSetProps}
 * * {@link MarginProps}
 * * {@link MaxWidthProps}
 * * {@link MinWidthProps}
 * * {@link PositionSetProps}
 * * {@link WidthProps}
 *
 * @noInheritDoc
 */


var styleParser = (0, _core.compose)(_system.maxWidth, _system.minWidth, _system.width, _system.flexItemSet, _system.positionSet, _system.margin);

var selectButtonsStylePropTypes = _objectSpread({}, _system.maxWidthPropTypes, {}, _system.minWidthPropTypes, {}, _system.widthPropTypes, {}, _system.flexItemSetPropTypes, {}, _system.positionSetPropTypes, {}, _system.marginPropTypes);
/**
 * Props shared between the {@link SelectButtons} and {@link SelectButtonsSynced} components.
 *
 * @noInheritDoc
 */


exports.selectButtonsStylePropTypes = selectButtonsStylePropTypes;

var sharedSelectButtonsPropTypes = _objectSpread({
  // We do more strict checks in render.
  options: _propTypes.default.arrayOf(_propTypes.default.shape({
    value: _select_and_select_buttons_helpers.selectOptionValuePropType,
    label: _propTypes.default.node.isRequired,
    disabled: _propTypes.default.bool
  }).isRequired).isRequired,
  onChange: _propTypes.default.func,
  disabled: _propTypes.default.bool,
  size: _control_sizes.controlSizePropType,
  className: _propTypes.default.string,
  style: _propTypes.default.object,
  'aria-labelledby': _propTypes.default.string,
  'aria-describedby': _propTypes.default.string
}, selectButtonsStylePropTypes, {}, _tooltip_anchor_props.tooltipAnchorPropTypes, {}, selectButtonsStylePropTypes);
/**
 * Props for the {@link SelectButtons} component. Also accepts:
 * * {@link SelectButtonsStyleProps}
 *
 * @docsPath UI/components/SelectButtons
 */


exports.sharedSelectButtonsPropTypes = sharedSelectButtonsPropTypes;

/**
 * A segmented control for selecting one value from a set of options.
 *
 * [[ Story id="selectbuttons--example" title="Select buttons example" ]]
 *
 * @docsPath UI/components/SelectButtons
 * @component
 */
var SelectButtons = (props, ref) => {
  var className = props.className,
      style = props.style,
      options = props.options,
      disabled = props.disabled,
      value = props.value,
      _props$size = props.size,
      size = _props$size === void 0 ? _control_sizes.ControlSize.default : _props$size,
      onChange = props.onChange,
      onMouseEnter = props.onMouseEnter,
      onMouseLeave = props.onMouseLeave,
      onClick = props.onClick,
      hasOnClick = props.hasOnClick,
      ariaDescribedBy = props['aria-describedby'],
      ariaLabelledBy = props['aria-labelledby'],
      styleProps = (0, _objectWithoutProperties2.default)(props, ["className", "style", "options", "disabled", "value", "size", "onChange", "onMouseEnter", "onMouseLeave", "onClick", "hasOnClick", "aria-describedby", "aria-labelledby"]); // There is only a single default variant.

  var _useSelectButtonsVari = useSelectButtonsVariant(),
      containerClassNameForVariant = _useSelectButtonsVari.containerClassNameForVariant,
      optionClassNameForVariant = _useSelectButtonsVari.optionClassNameForVariant;

  var containerClassNameForSize = (0, _control_sizes.useSelectButtonsSize)(size);
  var classNameForStyleProps = (0, _use_styled_system.default)(_objectSpread({
    width: '100%'
  }, styleProps), styleParser);

  var _useState = (0, _react.useState)((0, _private_utils.getLocallyUniqueId)('sb-')),
      _useState2 = (0, _slicedToArray2.default)(_useState, 1),
      generatedId = _useState2[0];

  var _useState3 = (0, _react.useState)(false),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      isFocused = _useState4[0],
      setIsFocused = _useState4[1];

  (0, _react.useEffect)(() => {
    // Check options here for a cleaner stack trace.
    // Also, even though options are required, still check if it's set because
    // the error is really ugly and covers up the prop type check.
    var validationResult = (0, _select_and_select_buttons_helpers.validateOptions)(options);

    if (!validationResult.isValid) {
      throw (0, _error_utils.spawnError)('<SelectButtons> %s', validationResult.reason);
    }
  }, [options]);

  function _onChange(newValue) {
    if (onChange) {
      if (newValue !== value) {
        onChange(newValue);
      }
    }
  }

  return _react.default.createElement("div", {
    // TODO (stephen): remove tooltip anchor props
    ref: ref,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave,
    onClick: onClick,
    onFocus: () => setIsFocused(true),
    onBlur: () => setIsFocused(false),
    className: (0, _emotion.cx)(containerClassNameForSize, containerClassNameForVariant, classNameForStyleProps, className),
    style: style,
    "data-disabled": disabled,
    "data-focused": isFocused,
    "aria-labelledby": ariaLabelledBy,
    "aria-describedby": ariaDescribedBy
  }, options.map((option, index) => {
    var isSelected = option.value === value;
    var isOptionDisabled = disabled || option.disabled;
    var radioId = "".concat(generatedId, "-").concat(index);
    return _react.default.createElement("div", {
      key: (0, _select_and_select_buttons_helpers.optionValueToString)(option.value),
      className: optionClassNameForVariant
    }, _react.default.createElement("input", {
      type: "radio",
      onChange: isOptionDisabled ? undefined : () => _onChange(option.value),
      disabled: isOptionDisabled,
      checked: isSelected,
      className: _css_helpers.default.VISUALLY_HIDDEN,
      id: radioId,
      name: generatedId
    }), _react.default.createElement("label", {
      htmlFor: radioId
    }, _react.default.createElement("span", {
      className: _css_helpers.default.TRUNCATE
    }, option.label)));
  }));
};

var ForwardedRefSelectButtons = _react.default.forwardRef(SelectButtons);

ForwardedRefSelectButtons.propTypes = _objectSpread({
  value: _select_and_select_buttons_helpers.selectOptionValuePropType
}, sharedSelectButtonsPropTypes);
ForwardedRefSelectButtons.displayName = 'SelectButtons';
var _default = ForwardedRefSelectButtons;
exports.default = _default;
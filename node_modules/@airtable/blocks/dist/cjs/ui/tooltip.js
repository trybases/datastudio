"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _emotion = require("emotion");

var React = _interopRequireWildcard(require("react"));

var _private_utils = require("../private_utils");

var _baymax_utils = require("./baymax_utils");

var _popover = _interopRequireDefault(require("./popover"));

var _text = _interopRequireDefault(require("./text"));

/** @module @airtable/blocks/ui: Tooltip */

/** */
var FADE_IN_ANIMATION_DURATION = 150;
/**
 * Props for the {@link Tooltip} component.
 *
 * @docsPath UI/components/Tooltip
 */

/**
 * A component that renders a tooltip on hover. Wraps its children.
 *
 * [[ Story id="tooltip--example" title="Tooltip example" ]]
 *
 * @docsPath UI/components/Tooltip
 * @component
 */
var Tooltip =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2.default)(Tooltip, _React$Component);

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */
  function Tooltip(props) {
    var _this;

    (0, _classCallCheck2.default)(this, Tooltip);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Tooltip).call(this, props));
    _this.state = {
      isShowingTooltip: false
    };
    _this._onMouseEnter = _this._onMouseEnter.bind((0, _assertThisInitialized2.default)(_this));
    _this._onMouseLeave = _this._onMouseLeave.bind((0, _assertThisInitialized2.default)(_this));
    _this._onClick = _this._onClick.bind((0, _assertThisInitialized2.default)(_this));
    _this._showTooltip = _this._showTooltip.bind((0, _assertThisInitialized2.default)(_this));
    _this._hideTooltip = _this._hideTooltip.bind((0, _assertThisInitialized2.default)(_this));
    _this._renderTooltipContent = _this._renderTooltipContent.bind((0, _assertThisInitialized2.default)(_this));
    return _this;
  }
  /** @internal */


  (0, _createClass2.default)(Tooltip, [{
    key: "_onMouseEnter",
    value: function _onMouseEnter(e) {
      this._showTooltip();

      var originalOnMouseEnter = this.props.children.props.onMouseEnter;

      if (originalOnMouseEnter) {
        originalOnMouseEnter(e);
      }
    }
    /** @internal */

  }, {
    key: "_onMouseLeave",
    value: function _onMouseLeave(e) {
      this._hideTooltip();

      var originalOnMouseLeave = this.props.children.props.onMouseLeave;

      if (originalOnMouseLeave) {
        originalOnMouseLeave(e);
      }
    }
    /** @internal */

  }, {
    key: "_onClick",
    value: function _onClick(e) {
      var _this$props = this.props,
          shouldHideTooltipOnClick = _this$props.shouldHideTooltipOnClick,
          children = _this$props.children;

      if (shouldHideTooltipOnClick) {
        this._hideTooltip();
      }

      var originalOnClick = children.props.onClick;

      if (originalOnClick) {
        originalOnClick(e);
      }
    }
    /** @internal */

  }, {
    key: "_showTooltip",
    value: function _showTooltip() {
      this.setState({
        isShowingTooltip: true
      });
    }
    /** @internal */

  }, {
    key: "_hideTooltip",
    value: function _hideTooltip() {
      this.setState({
        isShowingTooltip: false
      });
    }
    /** @internal */

  }, {
    key: "_renderTooltipContent",
    value: function _renderTooltipContent() {
      var _this$props2 = this.props,
          content = _this$props2.content,
          className = _this$props2.className,
          style = _this$props2.style;
      var renderedContent;
      var isContentAFunction;

      if (typeof content === 'function') {
        renderedContent = content();
        isContentAFunction = true;
      } else {
        renderedContent = content;
        isContentAFunction = false;
      }

      return React.createElement(_text.default, {
        className: (0, _emotion.cx)((0, _baymax_utils.baymax)('nowrap'), className),
        style: style,
        position: "relative" // Add padding only when using content.
        ,
        padding: isContentAFunction ? null : 2,
        backgroundColor: "dark",
        textColor: "white",
        borderRadius: "default",
        overflow: "hidden"
      }, renderedContent);
    }
    /** @hidden */

  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          children = _this$props3.children,
          content = _this$props3.content,
          disabled = _this$props3.disabled;

      if (disabled || !content) {
        // The tooltip will never show, so just return the children.
        return children;
      }

      var popoverAnchor = React.cloneElement(React.Children.only(children), {
        onMouseEnter: this._onMouseEnter,
        onMouseLeave: this._onMouseLeave,
        onClick: this._onClick,
        // Specifically for RecordCard, which needs to know if onClick is defined.
        hasOnClick: children.props.onClick !== undefined
      });
      return React.createElement(_popover.default, {
        renderContent: this._renderTooltipContent,
        placementX: this.props.placementX,
        placementY: this.props.placementY,
        placementOffsetX: this.props.placementOffsetX,
        placementOffsetY: this.props.placementOffsetY,
        fitInWindowMode: this.props.fitInWindowMode,
        isOpen: this.state.isShowingTooltip,
        backgroundStyle: {
          // Override the background style of the popover so that it doesn't
          // take up any space. If we don't do this, the mouseEnter and mouseLeave
          // handlers won't work, since showing the Popover would place a div over
          // the content that we care about.
          top: 0,
          left: 0,
          width: 0,
          height: 0,
          animationName: 'opacityFadeIn',
          animationDuration: "".concat(FADE_IN_ANIMATION_DURATION, "ms"),
          animationTimingFunction: 'ease-out'
        }
      }, popoverAnchor);
    }
  }]);
  return Tooltip;
}(React.Component);

(0, _defineProperty2.default)(Tooltip, "placements", _popover.default.placements);
(0, _defineProperty2.default)(Tooltip, "fitInWindowModes", _popover.default.fitInWindowModes);
(0, _defineProperty2.default)(Tooltip, "propTypes", {
  children: _propTypes.default.element.isRequired,
  content: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func]),
  placementX: _propTypes.default.oneOf([_popover.default.placements.LEFT, _popover.default.placements.CENTER, _popover.default.placements.RIGHT]),
  placementY: _propTypes.default.oneOf([_popover.default.placements.TOP, _popover.default.placements.CENTER, _popover.default.placements.BOTTOM]),
  placementOffsetX: _propTypes.default.number,
  placementOffsetY: _propTypes.default.number,
  fitInWindowMode: _propTypes.default.oneOf((0, _private_utils.values)(_popover.default.fitInWindowModes)),
  shouldHideTooltipOnClick: _propTypes.default.bool,
  disabled: _propTypes.default.bool,
  className: _propTypes.default.string,
  style: _propTypes.default.object
});
(0, _defineProperty2.default)(Tooltip, "defaultProps", {
  placementX: _popover.default.placements.RIGHT,
  placementY: _popover.default.placements.CENTER,
  placementOffsetX: 8,
  placementOffsetY: 8,
  fitInWindowMode: _popover.default.fitInWindowModes.FLIP
});
var _default = Tooltip;
exports.default = _default;
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _view = _interopRequireDefault(require("../models/view"));

var _use_loadable = _interopRequireDefault(require("./use_loadable"));

var _use_watchable = _interopRequireDefault(require("./use_watchable"));

/** @module @airtable/blocks/ui: useViewMetadata */

/** */

/**
 * Returns a {@link ViewMetadataQueryResult} for the specified view and re-renders whenever the
 * view metadata changes. Suspends if the view is not already loaded.
 *
 * @param viewOrViewMetadataQueryResult The {@link View} or {@link ViewMetadataQueryResult} to watch and use metadata from.
 * @example
 * ```js
 * import {useBase, useViewMetadata} from '@airtable/blocks/ui';
 *
 * function ViewFields({view}) {
 *     const viewMetadata = useViewMetadata(view);
 *
 *     return (
 *         <ul>
 *             {viewMetadata.visibleFields.map(field => (
 *                 <li key={field.id}>{field.name}</li>
 *             ))}
 *         </ul>
 *     );
 * }
 * ```
 * @docsPath UI/hooks/useViewMetadata
 * @hook
 */
function useViewMetadata(viewOrViewMetadataQueryResult) {
  var queryResult = viewOrViewMetadataQueryResult instanceof _view.default ? viewOrViewMetadataQueryResult.selectMetadata() : viewOrViewMetadataQueryResult;
  (0, _use_loadable.default)(queryResult !== null && queryResult !== void 0 ? queryResult : null);
  (0, _use_watchable.default)(queryResult, ['allFields', 'visibleFields']);
  return queryResult !== null && queryResult !== void 0 ? queryResult : null;
}

var _default = useViewMetadata;
exports.default = _default;
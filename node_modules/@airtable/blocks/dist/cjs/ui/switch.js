"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.symbol");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.includes");

require("core-js/modules/es.object.get-own-property-descriptors");

require("core-js/modules/web.dom-collections.for-each");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.sharedSwitchPropTypes = exports.switchStylePropTypes = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _emotion = require("emotion");

var _react = _interopRequireDefault(require("react"));

var _core = require("@styled-system/core");

var _private_utils = require("../private_utils");

var _use_styled_system = _interopRequireDefault(require("./use_styled_system"));

var _system = require("./system");

var _tooltip_anchor_props = require("./types/tooltip_anchor_props");

var _use_theme = _interopRequireDefault(require("./theme/use_theme"));

var _control_sizes = require("./control_sizes");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var SwitchVariant = (0, _private_utils.createEnum)('default', 'danger');
var switchVariantPropType = (0, _private_utils.createPropTypeFromEnum)(SwitchVariant);
/** @internal */

function useSwitchVariant() {
  var variant = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : SwitchVariant.default;

  var _useTheme = (0, _use_theme.default)(),
      switchVariants = _useTheme.switchVariants;

  return switchVariants[variant];
}
/**
 * Props shared between the {@link Switch} and {@link SwitchSynced} components.
 *
 * @noInheritDoc
 */


var switchStylePropTypes = _objectSpread({}, _system.maxWidthPropTypes, {}, _system.minWidthPropTypes, {}, _system.widthPropTypes, {}, _system.flexItemSetPropTypes, {}, _system.positionSetPropTypes, {}, _system.spacingSetPropTypes, {}, _system.backgroundColorPropTypes, {}, _system.displayPropTypes);

exports.switchStylePropTypes = switchStylePropTypes;

var sharedSwitchPropTypes = _objectSpread({
  disabled: _propTypes.default.bool,
  id: _propTypes.default.string,
  label: _propTypes.default.node,
  onChange: _propTypes.default.func,
  tabIndex: _propTypes.default.number,
  variant: switchVariantPropType,
  className: _propTypes.default.string,
  style: _propTypes.default.object,
  'aria-label': _propTypes.default.string,
  'aria-labelledby': _propTypes.default.string,
  'aria-describedby': _propTypes.default.string
}, _tooltip_anchor_props.tooltipAnchorPropTypes, {}, switchStylePropTypes);
/**
 * Style props for the {@link Switch} component. Also accepts:
 * * {@link BackgroundColorProps}
 * * {@link FlexItemSetProps}
 * * {@link MinWidthProps}
 * * {@link MaxWidthProps}
 * * {@link PositionSetProps}
 * * {@link SpacingSetProps}
 * * {@link WidthProps}
 *
 * @noInheritDoc
 */


exports.sharedSwitchPropTypes = sharedSwitchPropTypes;
var styleParser = (0, _core.compose)(_system.maxWidth, _system.minWidth, _system.width, _system.flexItemSet, _system.positionSet, _system.spacingSet, _system.display, _system.backgroundColor);
/**
 * A toggle switch for controlling boolean values. Similar to a checkbox.
 *
 * [[ Story id="switch--example" title="Switch example" ]]
 *
 * By default, the Switch component is styled to be full-width (`width="100%"`) with a gray
 * background to match other controls like Select, SelectButtons, Input, etc. This behavior can be
 * overridden using style props. For example, you can set `backgroundColor="transparent"` on the
 * Switch for a transparent background.
 *
 * @docsPath UI/components/Switch
 * @component
 */

var Switch = (props, ref) => {
  var disabled = props.disabled,
      id = props.id,
      label = props.label,
      _props$tabIndex = props.tabIndex,
      tabIndex = _props$tabIndex === void 0 ? 0 : _props$tabIndex,
      _props$variant = props.variant,
      variant = _props$variant === void 0 ? SwitchVariant.default : _props$variant,
      _props$size = props.size,
      size = _props$size === void 0 ? _control_sizes.ControlSize.default : _props$size,
      value = props.value,
      onClick = props.onClick,
      onChange = props.onChange,
      onMouseEnter = props.onMouseEnter,
      onMouseLeave = props.onMouseLeave,
      className = props.className,
      style = props.style,
      ariaLabel = props['aria-label'],
      ariaDescribedBy = props['aria-describedby'],
      ariaLabelledBy = props['aria-labelledby'],
      styleProps = (0, _objectWithoutProperties2.default)(props, ["disabled", "id", "label", "tabIndex", "variant", "size", "value", "onClick", "onChange", "onMouseEnter", "onMouseLeave", "className", "style", "aria-label", "aria-describedby", "aria-labelledby"]);
  var classNameForStyleProps = (0, _use_styled_system.default)(_objectSpread({
    display: 'flex',
    width: '100%'
  }, styleProps), styleParser);

  var _useSwitchVariant = useSwitchVariant(variant),
      classNameForVariant = _useSwitchVariant.baseClassName,
      switchContainerClassName = _useSwitchVariant.switchContainerClassName,
      switchClassName = _useSwitchVariant.switchClassName,
      switchLabelClassName = _useSwitchVariant.switchLabelClassName;

  var classNameForSize = (0, _control_sizes.useSwitchSize)(size);

  if (!label && !ariaLabelledBy && !ariaLabel) {
    // eslint-disable-next-line no-console
    console.warn('<Switch> should be labeled using either the `label`, `ariaLabel`, or `ariaLabelledBy` prop');
  }

  function _onClick(e) {
    // onClick should only be defined in the case of a tooltip
    if (onClick) {
      onClick(e);
    }

    _toggleValue();
  }

  function _onKeyDown(e) {
    if (e.ctrlKey || e.altKey || e.metaKey) {
      return;
    }

    if (['Enter', ' '].includes(e.key)) {
      e.preventDefault();

      _toggleValue();
    }
  }

  function _toggleValue() {
    if (onChange) {
      onChange(!value);
    }
  }

  return _react.default.createElement("div", {
    ref: ref // TODO (stephen): remove tooltip anchor props
    ,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave,
    onClick: disabled ? undefined : _onClick,
    onKeyDown: disabled ? undefined : _onKeyDown,
    id: id,
    className: (0, _emotion.cx)(classNameForVariant, classNameForSize, classNameForStyleProps, className),
    style: style,
    tabIndex: disabled ? undefined : tabIndex,
    role: "checkbox",
    "aria-disabled": disabled,
    "aria-checked": !!value,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    "aria-describedby": ariaDescribedBy
  }, _react.default.createElement("div", {
    className: switchContainerClassName
  }, _react.default.createElement("div", {
    className: switchClassName
  })), label && _react.default.createElement("label", {
    className: switchLabelClassName
  }, label));
};

var ForwardedRefSwitch = _react.default.forwardRef(Switch);

ForwardedRefSwitch.propTypes = _objectSpread({
  value: _propTypes.default.bool.isRequired
}, sharedSwitchPropTypes);
ForwardedRefSwitch.displayName = 'Switch';
var _default = ForwardedRefSwitch;
exports.default = _default;
"use strict";

require("core-js/modules/es.number.constructor");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ensureNumbersAreWithinScale;

var _core = require("@styled-system/core");

var _error_utils = require("../../../error_utils");

/** @internal */
function isNumber(n) {
  return typeof n === 'number' && !isNaN(n);
}
/** @internal */


function ensureNumbersAreWithinScale(params) {
  return (value, scale) => {
    if (!Array.isArray(scale)) {
      throw (0, _error_utils.spawnError)('The scale for "%s" should be an Array', params.propertyName);
    }

    if (!isNumber(value)) {
      // Not a number, so simply return the value.
      // We still use `get` if we are dealing with responsive values.
      return (0, _core.get)(scale, value, value);
    }

    if (!Number.isInteger(value)) {
      throw (0, _error_utils.spawnError)('The number you passed for "%s" is not supported. To use a pixel value, pass the string "%spx" instead.', params.propertyName, value);
    }

    var isValueNegative = value < 0;

    if (isValueNegative && !params.shouldAllowNegativeNumbers) {
      throw (0, _error_utils.spawnError)('The scale for the "%s" property does not support negative values. To use a pixel value, pass the string "%spx" instead.', params.propertyName, value);
    }

    var absoluteValue = Math.abs(value);

    if (absoluteValue >= scale.length) {
      throw (0, _error_utils.spawnError)('The number you passed for "%s" falls out the scale. To use a pixel value, pass the string "%spx" instead.', params.propertyName, value);
    }

    var valueFromScale = Number(scale[absoluteValue]);
    return valueFromScale * (isValueNegative ? -1 : 1);
  };
}
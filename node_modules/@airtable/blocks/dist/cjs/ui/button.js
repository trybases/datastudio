"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.symbol");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.object.get-own-property-descriptors");

require("core-js/modules/web.dom-collections.for-each");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.buttonStylePropTypes = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _emotion = require("emotion");

var React = _interopRequireWildcard(require("react"));

var _core = require("@styled-system/core");

var _private_utils = require("../private_utils");

var _use_styled_system = _interopRequireDefault(require("./use_styled_system"));

var _create_responsive_prop_type = _interopRequireDefault(require("./system/utils/create_responsive_prop_type"));

var _system = require("./system");

var _use_theme = _interopRequireDefault(require("./theme/use_theme"));

var _control_sizes = require("./control_sizes");

var _aria_props = require("./types/aria_props");

var _tooltip_anchor_props = require("./types/tooltip_anchor_props");

var _icon_config = require("./icon_config");

var _icon = _interopRequireDefault(require("./icon"));

var _css_helpers = _interopRequireDefault(require("./css_helpers"));

var _box = _interopRequireDefault(require("./box"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var styleParser = (0, _core.compose)(_system.display, _system.maxWidth, _system.minWidth, _system.width, _system.flexItemSet, _system.positionSet, _system.margin);

var buttonStylePropTypes = _objectSpread({
  display: (0, _create_responsive_prop_type.default)(_propTypes.default.oneOf(['inline-flex', 'flex', 'none']))
}, _system.maxWidthPropTypes, {}, _system.minWidthPropTypes, {}, _system.widthPropTypes, {}, _system.flexItemSetPropTypes, {}, _system.positionSetPropTypes, {}, _system.marginPropTypes);
/**
 * Variants for the {@link Button} component:
 *
 * • **default**
 *
 * Gray button for toolbars and other generic actions.
 *
 * • **primary**
 *
 * Blue button used for primary actions and CTAs. There should only be one primary button present at a time. Often used in {@link Dialog} and bottom bars.
 *
 * • **secondary**
 *
 * Transparent button that pairs with the primary button. This is typically used for cancel or back buttons.
 *
 * • **danger**
 *
 * Red button that replaces primary buttons for dangerous or otherwise difficult-to-reverse actions like record deletion.
 */


exports.buttonStylePropTypes = buttonStylePropTypes;
var ButtonVariant = (0, _private_utils.createEnum)('default', 'primary', 'secondary', 'danger');
var buttonVariantPropType = (0, _private_utils.createPropTypeFromEnum)(ButtonVariant);
/** @internal */

function useButtonVariant() {
  var variant = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ButtonVariant.default;

  var _useTheme = (0, _use_theme.default)(),
      buttonVariants = _useTheme.buttonVariants;

  return buttonVariants[variant];
}
/**
 * Props for the {@link Button} component. Also accepts:
 * * {@link AriaProps}
 * * {@link ButtonStyleProps}
 *
 * @noInheritDoc
 * @docsPath UI/components/Button
 */


/**
 * Clickable button component.
 *
 * [[ Story id="button--example" title="Box example" ]]
 *
 * @component
 * @docsPath UI/components/Button
 */
var Button = (props, ref) => {
  var _props$size = props.size,
      size = _props$size === void 0 ? _control_sizes.ControlSize.default : _props$size,
      _props$variant = props.variant,
      variant = _props$variant === void 0 ? ButtonVariant.default : _props$variant,
      icon = props.icon,
      id = props.id,
      className = props.className,
      style = props.style,
      onMouseEnter = props.onMouseEnter,
      onMouseLeave = props.onMouseLeave,
      onClick = props.onClick,
      hasOnClick = props.hasOnClick,
      _props$type = props.type,
      type = _props$type === void 0 ? 'button' : _props$type,
      disabled = props.disabled,
      tabIndex = props.tabIndex,
      children = props.children,
      ariaLabel = props['aria-label'],
      ariaSelected = props['aria-selected'],
      styleProps = (0, _objectWithoutProperties2.default)(props, ["size", "variant", "icon", "id", "className", "style", "onMouseEnter", "onMouseLeave", "onClick", "hasOnClick", "type", "disabled", "tabIndex", "children", "aria-label", "aria-selected"]);
  var classNameForButtonSize = (0, _control_sizes.useButtonSize)(size);
  var classNameForButtonVariant = useButtonVariant(variant);
  var classNameForStyleProps = (0, _use_styled_system.default)(_objectSpread({
    display: 'inline-flex'
  }, styleProps), styleParser);
  var hasIcon = icon !== undefined;
  var hasChildren = !!children;

  if (!hasChildren && !ariaLabel) {
    // eslint-disable-next-line no-console
    console.error('<Button> without a text label should include an explicit aria-label prop.');
  }

  return React.createElement("button", {
    ref: ref,
    id: id,
    className: (0, _emotion.cx)(classNameForButtonVariant, classNameForButtonSize, classNameForStyleProps, className),
    style: style // TODO (stephen): remove tooltip anchor props
    ,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave,
    onClick: onClick,
    type: type,
    disabled: disabled,
    tabIndex: tabIndex,
    "aria-label": ariaLabel,
    "aria-selected": ariaSelected
  }, typeof icon === 'string' ? React.createElement(_icon.default, {
    name: icon,
    size: "1em",
    fillColor: "currentColor",
    flex: "none"
  }) : icon, hasChildren && React.createElement(_box.default, {
    as: "span" // The margin is on the span, and not on the icon because it would mean that when using a custom icon
    // the consumer would manually need to figure out what the margin is supposed to be.
    ,
    marginLeft: hasIcon ? '0.5em' : undefined,
    className: _css_helpers.default.TRUNCATE
  }, children));
};

var ForwardedRefButton = React.forwardRef(Button);
ForwardedRefButton.propTypes = _objectSpread({
  size: _control_sizes.controlSizePropType,
  variant: buttonVariantPropType,
  icon: _propTypes.default.oneOfType([_icon_config.iconNamePropType, _propTypes.default.element]),
  id: _propTypes.default.string,
  className: _propTypes.default.string,
  style: _propTypes.default.object,
  // `onClick` is already defined in `tooltipAnchorPropTypes`, for clarity we list it again.
  onClick: _propTypes.default.func,
  type: _propTypes.default.oneOf(['button', 'submit', 'reset']),
  disabled: _propTypes.default.bool,
  tabIndex: _propTypes.default.number,
  // TODO: This is optional in order to support buttons with only icons.
  // In the future, if we add IconButton or similar, it can be made non-optional.
  children: _propTypes.default.node
}, buttonStylePropTypes, {}, _tooltip_anchor_props.tooltipAnchorPropTypes, {}, _aria_props.ariaPropTypes);
ForwardedRefButton.displayName = 'Button';
var _default = ForwardedRefButton;
exports.default = _default;
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.get-own-property-descriptors");

require("core-js/modules/es.object.to-string");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.sharedViewPickerPropTypes = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _private_utils = require("../private_utils");

var _get_sdk = _interopRequireDefault(require("../get_sdk"));

var _view = _interopRequireDefault(require("../models/view"));

var _table = _interopRequireDefault(require("../models/table"));

var _view2 = require("../types/view");

var _select = require("./select");

var _model_picker_select = _interopRequireDefault(require("./model_picker_select"));

var _use_watchable = _interopRequireDefault(require("./use_watchable"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// Shared with `ViewPicker` and `ViewPickerSynced`.
var sharedViewPickerPropTypes = _objectSpread({
  table: _propTypes.default.instanceOf(_table.default),
  allowedTypes: _propTypes.default.arrayOf(_propTypes.default.oneOf((0, _private_utils.values)(_view2.ViewType)).isRequired),
  shouldAllowPickingNone: _propTypes.default.bool,
  placeholder: _propTypes.default.string,
  onChange: _propTypes.default.func
}, _select.sharedSelectBasePropTypes);
/**
 * Props for the {@link ViewPicker} component. Also accepts:
 * * {@link SelectStyleProps}
 *
 * @docsPath UI/components/ViewPicker
 */


exports.sharedViewPickerPropTypes = sharedViewPickerPropTypes;

/**
 * Dropdown menu component for selecting views.
 *
 * [[ Story id="modelpickers--viewpicker-example" title="View picker example" ]]
 *
 * @component
 * @docsPath UI/components/ViewPicker
 */
var ViewPicker = (props, ref) => {
  var table = props.table,
      selectedView = props.view,
      shouldAllowPickingNone = props.shouldAllowPickingNone,
      _props$allowedTypes = props.allowedTypes,
      allowedTypes = _props$allowedTypes === void 0 ? [_view2.ViewType.GRID, _view2.ViewType.CALENDAR, _view2.ViewType.GALLERY, _view2.ViewType.KANBAN] : _props$allowedTypes,
      placeholder = props.placeholder,
      onChange = props.onChange,
      restOfProps = (0, _objectWithoutProperties2.default)(props, ["table", "view", "shouldAllowPickingNone", "allowedTypes", "placeholder", "onChange"]);
  (0, _use_watchable.default)((0, _get_sdk.default)().base, ['tables']);
  (0, _use_watchable.default)(table, ['views']);

  if (!table || table.isDeleted) {
    return null;
  }

  function _onChange(viewId) {
    if (onChange) {
      var view = table && !table.isDeleted && viewId ? table.getViewByIdIfExists(viewId) : null;
      onChange(view);
    }
  }

  var placeholderToUse;

  if (placeholder === undefined) {
    // Let's set a good default value for the placeholder, depending
    // on the shouldAllowPickingNone flag.
    placeholderToUse = shouldAllowPickingNone ? 'None' : 'Pick a view...';
  } else {
    placeholderToUse = placeholder;
  }

  var allowedTypesSet = {};

  if (allowedTypes) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = allowedTypes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var allowedType = _step.value;
        allowedTypesSet[allowedType] = true;
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  var shouldAllowPickingViewFn = view => allowedTypesSet[view.type];

  return React.createElement(_model_picker_select.default, (0, _extends2.default)({}, restOfProps, {
    ref: ref,
    models: table.views // `shouldAllowPickingModelFn` is typed as `AnyModel`. Cast to any since we only expect `Field`.
    ,
    shouldAllowPickingModelFn: shouldAllowPickingViewFn,
    selectedModelId: selectedView && !selectedView.isDeleted ? selectedView.id : null,
    modelKeysToWatch: ['name'],
    shouldAllowPickingNone: shouldAllowPickingNone,
    placeholder: placeholderToUse,
    onChange: _onChange
  }));
};

var ForwardedRefViewPicker = React.forwardRef(ViewPicker);
ForwardedRefViewPicker.displayName = 'ViewPicker';
ForwardedRefViewPicker.propTypes = _objectSpread({
  view: _propTypes.default.instanceOf(_view.default)
}, sharedViewPickerPropTypes);
var _default = ForwardedRefViewPicker;
exports.default = _default;
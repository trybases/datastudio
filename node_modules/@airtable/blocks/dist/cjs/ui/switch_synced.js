"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.symbol");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.object.get-own-property-descriptors");

require("core-js/modules/web.dom-collections.for-each");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var React = _interopRequireWildcard(require("react"));

var _switch = _interopRequireWildcard(require("./switch"));

var _use_synced = _interopRequireDefault(require("./use_synced"));

var _global_config_synced_component_helpers = _interopRequireDefault(require("./global_config_synced_component_helpers"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * A toggleable switch for controlling boolean values, synced with {@link GlobalConfig}. Similar to a checkbox.
 *
 * [[ Story id="switch--example-synced" title="Synced switch example" ]]
 *
 * @docsPath UI/components/SwitchSynced
 * @groupPath UI/components/Switch
 * @component
 */
var SwitchSynced = (props, ref) => {
  var disabled = props.disabled,
      globalConfigKey = props.globalConfigKey,
      _onChange = props.onChange,
      restOfProps = (0, _objectWithoutProperties2.default)(props, ["disabled", "globalConfigKey", "onChange"]);

  var _useSynced = (0, _use_synced.default)(globalConfigKey),
      _useSynced2 = (0, _slicedToArray2.default)(_useSynced, 3),
      value = _useSynced2[0],
      setValue = _useSynced2[1],
      canSetValue = _useSynced2[2];

  return React.createElement(_switch.default, (0, _extends2.default)({}, restOfProps, {
    ref: ref,
    value: !!value,
    onChange: newValue => {
      setValue(newValue);

      if (_onChange) {
        _onChange(newValue);
      }
    },
    disabled: disabled || !canSetValue
  }));
};

var ForwardedRefSwitchSynced = React.forwardRef(SwitchSynced);
ForwardedRefSwitchSynced.propTypes = _objectSpread({
  globalConfigKey: _global_config_synced_component_helpers.default.globalConfigKeyPropType
}, _switch.sharedSwitchPropTypes);
ForwardedRefSwitchSynced.displayName = 'SwitchSynced';
var _default = ForwardedRefSwitchSynced;
exports.default = _default;
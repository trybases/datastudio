"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.array.iterator");

require("core-js/modules/web.dom-collections.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _dialog = _interopRequireWildcard(require("./dialog"));

var _heading = _interopRequireDefault(require("./heading"));

var _text = _interopRequireDefault(require("./text"));

var _button = _interopRequireDefault(require("./button"));

var _box = _interopRequireDefault(require("./box"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * A styled modal dialog component that prompts the user to confirm or cancel an action.
 *
 * [[ Story id="confirmationdialog--example" title="Confirmation dialog example" ]]
 *
 * By default, this component will focus the "Confirm" button on mount, so that pressing
 * the Enter key will confirm the action.
 *
 * @component
 * @docsPath UI/components/ConfirmationDialog
 */
var ConfirmationDialog =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2.default)(ConfirmationDialog, _React$Component);

  function ConfirmationDialog() {
    var _this;

    (0, _classCallCheck2.default)(this, ConfirmationDialog);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ConfirmationDialog).call(this, ...args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_confirmButtonRef", React.createRef());
    return _this;
  }

  (0, _createClass2.default)(ConfirmationDialog, [{
    key: "componentDidMount",

    /** @hidden */
    value: function componentDidMount() {
      if (this._confirmButtonRef.current !== null) {
        this._confirmButtonRef.current.focus();
      }
    }
    /** @hidden */

  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          title = _this$props.title,
          body = _this$props.body,
          cancelButtonText = _this$props.cancelButtonText,
          confirmButtonText = _this$props.confirmButtonText,
          isConfirmActionDangerous = _this$props.isConfirmActionDangerous,
          className = _this$props.className,
          style = _this$props.style,
          backgroundClassName = _this$props.backgroundClassName,
          backgroundStyle = _this$props.backgroundStyle,
          onCancel = _this$props.onCancel,
          onConfirm = _this$props.onConfirm,
          restOfProps = (0, _objectWithoutProperties2.default)(_this$props, ["title", "body", "cancelButtonText", "confirmButtonText", "isConfirmActionDangerous", "className", "style", "backgroundClassName", "backgroundStyle", "onCancel", "onConfirm"]);
      return React.createElement(_dialog.default, (0, _extends2.default)({
        onClose: onCancel,
        className: className,
        style: style,
        backgroundClassName: backgroundClassName,
        backgroundStyle: backgroundStyle
      }, restOfProps), React.createElement(_dialog.default.CloseButton, null), React.createElement(_heading.default, {
        size: "small"
      }, title), typeof body === 'string' ? React.createElement(_text.default, {
        variant: "paragraph"
      }, body) : body, React.createElement(_box.default, {
        display: "flex",
        flexDirection: "row-reverse",
        alignItems: "center",
        justifyContent: "start",
        width: "100%",
        marginTop: 3
      }, React.createElement(_button.default, {
        ref: this._confirmButtonRef,
        onClick: onConfirm,
        variant: isConfirmActionDangerous ? 'danger' : 'primary'
      }, confirmButtonText), React.createElement(_button.default, {
        onClick: onCancel,
        variant: "secondary",
        alignSelf: "end",
        marginRight: 2
      }, cancelButtonText)));
    }
  }]);
  return ConfirmationDialog;
}(React.Component);

(0, _defineProperty2.default)(ConfirmationDialog, "propTypes", _objectSpread({
  title: _propTypes.default.string.isRequired,
  body: _propTypes.default.node,
  cancelButtonText: _propTypes.default.string,
  confirmButtonText: _propTypes.default.string,
  isConfirmActionDangerous: _propTypes.default.bool,
  className: _propTypes.default.string,
  style: _propTypes.default.object,
  backgroundClassName: _propTypes.default.string,
  backgroundStyle: _propTypes.default.object,
  onCancel: _propTypes.default.func.isRequired,
  onConfirm: _propTypes.default.func.isRequired
}, _dialog.dialogStylePropTypes));
(0, _defineProperty2.default)(ConfirmationDialog, "defaultProps", {
  cancelButtonText: 'Cancel',
  confirmButtonText: 'Confirm',
  isConfirmActionDangerous: false,
  width: '400px'
});
var _default = ConfirmationDialog;
exports.default = _default;
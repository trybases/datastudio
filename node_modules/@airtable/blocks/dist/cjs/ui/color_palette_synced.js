"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var React = _interopRequireWildcard(require("react"));

var _error_utils = require("../error_utils");

var _color_palette = _interopRequireWildcard(require("./color_palette"));

var _synced = _interopRequireDefault(require("./synced"));

var _global_config_synced_component_helpers = _interopRequireDefault(require("./global_config_synced_component_helpers"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * A wrapper around the {@link ColorPalette} component that syncs with {@link GlobalConfig}.
 *
 * [[ Story id="colorpalette--synced-example" title="Synced color palette example" ]]
 *
 * @component
 * @docsPath UI/components/ColorPaletteSynced
 * @groupPath UI/components/ColorPalette
 */
var ColorPaletteSynced =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2.default)(ColorPaletteSynced, _React$Component);

  function ColorPaletteSynced() {
    (0, _classCallCheck2.default)(this, ColorPaletteSynced);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ColorPaletteSynced).apply(this, arguments));
  }

  (0, _createClass2.default)(ColorPaletteSynced, [{
    key: "render",

    /** @hidden */

    /** @hidden */
    value: function render() {
      var _this$props = this.props,
          globalConfigKey = _this$props.globalConfigKey,
          disabled = _this$props.disabled,
          _onChange = _this$props.onChange,
          restOfProps = (0, _objectWithoutProperties2.default)(_this$props, ["globalConfigKey", "disabled", "onChange"]);
      return React.createElement(_synced.default, {
        globalConfigKey: globalConfigKey,
        render: (_ref) => {
          var value = _ref.value,
              canSetValue = _ref.canSetValue,
              setValue = _ref.setValue;
          var currentColor;

          if (typeof value === 'string' || value === null || value === undefined) {
            currentColor = value;
          } else {
            (0, _error_utils.spawnError)('ColorPaletteSynced only works with a global config value that is a string, null, or undefined');
          }

          return React.createElement(_color_palette.default, (0, _extends2.default)({}, restOfProps, {
            color: currentColor,
            onChange: newValue => {
              setValue(newValue);

              if (_onChange) {
                _onChange(newValue);
              }
            },
            disabled: disabled || !canSetValue
          }));
        }
      });
    }
  }]);
  return ColorPaletteSynced;
}(React.Component);

(0, _defineProperty2.default)(ColorPaletteSynced, "propTypes", _objectSpread({
  globalConfigKey: _global_config_synced_component_helpers.default.globalConfigKeyPropType
}, _color_palette.colorPaletteStylePropTypes, {}, _color_palette.sharedColorPalettePropTypes));
var _default = ColorPaletteSynced;
exports.default = _default;
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.symbol");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.object.get-own-property-descriptors");

require("core-js/modules/web.dom-collections.for-each");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useStyledSystem;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _emotion = require("emotion");

var _use_theme = _interopRequireDefault(require("./theme/use_theme"));

var _index = require("./system/index");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/** @internal */
function useStyledSystem(styleProps) {
  var styleParser = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _index.allStylesParser;
  var theme = (0, _use_theme.default)(); // Add the theme to the style props because that's how the parser expects it.

  var styles = styleParser(_objectSpread({}, styleProps, {
    theme
  })); // At this point `styles` is still an object, we need to turn it into a class name.

  var classNameForStyleProps = (0, _emotion.css)(styles);
  return classNameForStyleProps;
}
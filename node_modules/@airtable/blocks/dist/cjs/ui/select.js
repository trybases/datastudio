"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.object.get-own-property-descriptors");

require("core-js/modules/es.object.to-string");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.sharedSelectPropTypes = exports.sharedSelectBasePropTypes = exports.selectStylePropTypes = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _emotion = require("emotion");

var React = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _core = require("@styled-system/core");

var _private_utils = require("../private_utils");

var _error_utils = require("../error_utils");

var _use_form_field_id = _interopRequireDefault(require("./use_form_field_id"));

var _system = require("./system");

var _use_theme = _interopRequireDefault(require("./theme/use_theme"));

var _tooltip_anchor_props = require("./types/tooltip_anchor_props");

var _select_and_select_buttons_helpers = require("./select_and_select_buttons_helpers");

var _use_styled_system = _interopRequireDefault(require("./use_styled_system"));

var _control_sizes = require("./control_sizes");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var SelectVariant = (0, _private_utils.createEnum)('default');
/** @internal */

function useSelectVariant() {
  var variant = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : SelectVariant.default;

  var _useTheme = (0, _use_theme.default)(),
      selectVariants = _useTheme.selectVariants;

  return selectVariants[variant];
} // This component isn't great right now. It's just a styled <select> with a really hacky
// way of getting the chevron arrow to show up. It also behaves weirdly when you give it
// a margin (I think this is a limitation of <select>). We should probably replace it with
// something like react-select, which would give us nice features like rendering custom
// elements for options (e.g. for field type icons) and typeahead search.

/**
 * Style props shared between the following components.
 * * {@link Select}, {@link SelectSynced}
 * * {@link TablePicker}, {@link TablePickerSynced}
 * * {@link ViewPicker}, {@link ViewPickerSynced}
 * * {@link FieldPicker}, {@link FieldPickerSynced}
 *
 * Also accepts:
 * * {@link FlexItemSetProps}
 * * {@link MarginProps}
 * * {@link MaxWidthProps}
 * * {@link MinWidthProps}
 * * {@link PositionSetProps}
 * * {@link MaxWidthProps}
 *
 * @noInheritDoc
 */


var selectStylePropTypes = _objectSpread({}, _system.maxWidthPropTypes, {}, _system.minWidthPropTypes, {}, _system.widthPropTypes, {}, _system.flexItemSetPropTypes, {}, _system.positionSetPropTypes, {}, _system.marginPropTypes); // Shared with `Select`, `SelectSynced`, `ModelPickerSelect` and `(Table/View/Field)Picker(Synced)`


exports.selectStylePropTypes = selectStylePropTypes;

var sharedSelectBasePropTypes = _objectSpread({
  size: _control_sizes.controlSizePropType,
  autoFocus: _propTypes.default.bool,
  disabled: _propTypes.default.bool,
  id: _propTypes.default.string,
  name: _propTypes.default.string,
  tabIndex: _propTypes.default.number,
  className: _propTypes.default.string,
  style: _propTypes.default.object,
  'aria-label': _propTypes.default.string,
  'aria-labelledby': _propTypes.default.string,
  'aria-describedby': _propTypes.default.string
}, _tooltip_anchor_props.tooltipAnchorPropTypes, {}, selectStylePropTypes);
/**
 * Props shared between the {@link Select} and {@link SelectSynced} components.
 */


exports.sharedSelectBasePropTypes = sharedSelectBasePropTypes;

// Shared with `Select` and `SelectSynced`.
var sharedSelectPropTypes = _objectSpread({
  // We do more strict checks in render.
  options: _propTypes.default.arrayOf(_propTypes.default.shape({
    value: _select_and_select_buttons_helpers.selectOptionValuePropType,
    label: _propTypes.default.node.isRequired,
    disabled: _propTypes.default.bool
  }).isRequired).isRequired,
  onChange: _propTypes.default.func
}, sharedSelectBasePropTypes);
/**
 * Props for the {@link Select} component. Also accepts:
 * * {@link SelectStyleProps}
 *
 * @docsPath UI/components/Select
 */


exports.sharedSelectPropTypes = sharedSelectPropTypes;
var styleParser = (0, _core.compose)(_system.maxWidth, _system.minWidth, _system.width, _system.flexItemSet, _system.positionSet, _system.margin);
/**
 * Dropdown menu component. A wrapper around `<select>` that fits in with Airtable's user interface.
 *
 * [[ Story id="select--example" title="Select example" ]]
 *
 * @component
 * @docsPath UI/components/Select
 */

var Select = (props, ref) => {
  var _props$size = props.size,
      size = _props$size === void 0 ? _control_sizes.ControlSize.default : _props$size,
      value = props.value,
      _props$options = props.options,
      originalOptions = _props$options === void 0 ? [] : _props$options,
      autoFocus = props.autoFocus,
      disabled = props.disabled,
      id = props.id,
      name = props.name,
      tabIndex = props.tabIndex,
      onChange = props.onChange,
      onMouseEnter = props.onMouseEnter,
      onMouseLeave = props.onMouseLeave,
      onClick = props.onClick,
      hasOnClick = props.hasOnClick,
      className = props.className,
      style = props.style,
      ariaLabel = props['aria-label'],
      ariaDescribedBy = props['aria-describedby'],
      ariaLabelledBy = props['aria-labelledby'],
      styleProps = (0, _objectWithoutProperties2.default)(props, ["size", "value", "options", "autoFocus", "disabled", "id", "name", "tabIndex", "onChange", "onMouseEnter", "onMouseLeave", "onClick", "hasOnClick", "className", "style", "aria-label", "aria-describedby", "aria-labelledby"]);
  var formFieldId = (0, _use_form_field_id.default)(); // There is only a single default variant.

  var classNameForSelectVariant = useSelectVariant();
  var classNameForSelectSize = (0, _control_sizes.useSelectSize)(size);
  var classNameForStyleProps = (0, _use_styled_system.default)(_objectSpread({
    width: '100%'
  }, styleProps), styleParser);

  function _onChange(e) {
    if (onChange) {
      var newValue = (0, _select_and_select_buttons_helpers.stringToOptionValue)(e.currentTarget.value);
      onChange(newValue);
    }
  } // Check options here for a cleaner stack trace.
  // Also, even though options are required, still check if it's set because
  // the error is really ugly and covers up the prop type check.


  var validationResult = (0, _select_and_select_buttons_helpers.validateOptions)(originalOptions);

  if (!validationResult.isValid) {
    throw (0, _error_utils.spawnError)('<Select> %s', validationResult.reason);
  }

  var didFindOptionMatchingValue = false;
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = originalOptions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var option = _step.value;

      if (option.value === value) {
        didFindOptionMatchingValue = true;
        break;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  var options = [];

  if (!didFindOptionMatchingValue) {
    // Since there's no option that matches the given value, let's add an
    // empty option at the top and log a warning.
    options.push({
      label: '',
      value,
      disabled: true
    }); // eslint-disable-next-line no-console

    console.warn("No option for selected value in <Select>: ".concat(String(value)).substr(0, 100));
  }

  options.push(...originalOptions);
  return React.createElement("select", {
    ref: ref,
    value: (0, _select_and_select_buttons_helpers.optionValueToString)(value),
    onChange: _onChange,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave,
    onClick: onClick,
    autoFocus: autoFocus,
    disabled: disabled,
    id: id || formFieldId,
    name: name,
    tabIndex: tabIndex,
    className: (0, _emotion.cx)(classNameForSelectVariant, classNameForSelectSize, classNameForStyleProps, className),
    style: style,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    "aria-describedby": ariaDescribedBy
  }, options.map(option => {
    var valueJson = (0, _select_and_select_buttons_helpers.optionValueToString)(option.value);
    return React.createElement("option", {
      key: valueJson,
      value: valueJson,
      disabled: option.disabled
    }, option.label);
  }));
};

var ForwardedRefSelect = React.forwardRef(Select);
ForwardedRefSelect.displayName = 'Select';
ForwardedRefSelect.propTypes = _objectSpread({
  value: _select_and_select_buttons_helpers.selectOptionValuePropType
}, sharedSelectPropTypes);
var _default = ForwardedRefSelect;
exports.default = _default;
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.object.get-own-property-descriptors");

require("core-js/modules/web.dom-collections.for-each");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.formFieldStylePropTypes = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _emotion = require("emotion");

var _core = require("@styled-system/core");

var _private_utils = require("../private_utils");

var _box = _interopRequireDefault(require("./box"));

var _text = _interopRequireWildcard(require("./text"));

var _label = _interopRequireDefault(require("./label"));

var _use_form_field_id = require("./use_form_field_id");

var _use_styled_system = _interopRequireDefault(require("./use_styled_system"));

var _system = require("./system");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var styleParser = (0, _core.compose)(_system.maxWidth, _system.minWidth, _system.width, _system.flexItemSet, _system.positionSet, _system.spacingSet);

var formFieldStylePropTypes = _objectSpread({}, _system.maxWidthPropTypes, {}, _system.minWidthPropTypes, {}, _system.widthPropTypes, {}, _system.flexItemSetPropTypes, {}, _system.positionSetPropTypes, {}, _system.spacingSetPropTypes);
/**
 * Props for the {@link FormField} component. Also accepts:
 * * {@link FormFieldStyleProps}
 *
 * @noInheritDoc
 * @docsPath UI/components/FormField
 */


exports.formFieldStylePropTypes = formFieldStylePropTypes;

/**
 * A form field component that wraps any control field, supplying a provided label and optional
 * description.
 *
 * [[ Story id="formfield--example" title="Form field example" ]]
 *
 * This component will automatically set up the `for` attribute on the outputted label with the `id` attribute
 * on the wrapped control field for the following UI components: Label, Select, FieldPicker,
 * ModelPicker, and ViewPicker. If you'd like to manually override this behavior, you can provide an
 * `htmlFor` prop to this component and manually set the `id` attribute on your wrapped control to
 * the same value.
 *
 * @docsPath UI/components/FormField
 * @component
 */
var FormField = (props, ref) => {
  var id = props.id,
      className = props.className,
      style = props.style,
      _props$label = props.label,
      label = _props$label === void 0 ? _text.TextSize.default : _props$label,
      htmlFor = props.htmlFor,
      description = props.description,
      children = props.children,
      styleProps = (0, _objectWithoutProperties2.default)(props, ["id", "className", "style", "label", "htmlFor", "description", "children"]);
  var classNameForStyleProps = (0, _use_styled_system.default)(_objectSpread({
    width: '100%'
  }, styleProps), styleParser);

  var _useState = (0, _react.useState)((0, _private_utils.getLocallyUniqueId)('form-field-')),
      _useState2 = (0, _slicedToArray2.default)(_useState, 1),
      generatedId = _useState2[0];

  var controlId = htmlFor || generatedId;
  var optionalLabelProps;

  if (description) {
    optionalLabelProps = {
      margin: 0
    };
  }

  return _react.default.createElement(_box.default, {
    ref: ref,
    id: id,
    className: (0, _emotion.cx)(classNameForStyleProps, className),
    style: style,
    display: "flex",
    flexDirection: "column",
    marginBottom: 3
  }, _react.default.createElement(_label.default, (0, _extends2.default)({
    htmlFor: controlId,
    size: "default"
  }, optionalLabelProps), label), description && _react.default.createElement(_text.default, {
    variant: "paragraph",
    size: "default",
    textColor: "light",
    marginBottom: "6px"
  }, description), _react.default.createElement(_use_form_field_id.FormFieldIdContext.Provider, {
    value: controlId
  }, children));
};

var ForwardedRefFormField = _react.default.forwardRef(FormField);

ForwardedRefFormField.propTypes = _objectSpread({
  id: _propTypes.default.string,
  className: _propTypes.default.string,
  style: _propTypes.default.object,
  label: _propTypes.default.node,
  htmlFor: _propTypes.default.string,
  description: _propTypes.default.string,
  children: _propTypes.default.node
}, formFieldStylePropTypes);
ForwardedRefFormField.displayName = 'FormField';
var _default = ForwardedRefFormField;
exports.default = _default;
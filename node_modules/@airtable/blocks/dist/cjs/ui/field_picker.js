"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.sort");

require("core-js/modules/es.object.get-own-property-descriptors");

require("core-js/modules/es.object.to-string");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.sharedFieldPickerPropTypes = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _private_utils = require("../private_utils");

var _get_sdk = _interopRequireDefault(require("../get_sdk"));

var _field = _interopRequireDefault(require("../models/field"));

var _table = _interopRequireDefault(require("../models/table"));

var _field2 = require("../types/field");

var _select = require("./select");

var _model_picker_select = _interopRequireDefault(require("./model_picker_select"));

var _use_watchable = _interopRequireDefault(require("./use_watchable"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// Shared with `FieldPicker` and `FieldPickerSynced`.
var sharedFieldPickerPropTypes = _objectSpread({
  table: _propTypes.default.instanceOf(_table.default),
  allowedTypes: _propTypes.default.arrayOf(_propTypes.default.oneOf((0, _private_utils.values)(_field2.FieldType)).isRequired),
  shouldAllowPickingNone: _propTypes.default.bool,
  placeholder: _propTypes.default.string,
  onChange: _propTypes.default.func
}, _select.sharedSelectBasePropTypes);
/**
 * Props for the {@link FieldPicker} component. Also accepts:
 * * {@link SelectStyleProps}
 *
 * @docsPath UI/components/FieldPicker
 */


exports.sharedFieldPickerPropTypes = sharedFieldPickerPropTypes;

/**
 * Dropdown menu component for selecting fields.
 *
 * [[ Story id="modelpickers--fieldpicker-example" title="Field picker example" ]]
 *
 * @docsPath UI/components/FieldPicker
 * @component
 */
var FieldPicker = (props, ref) => {
  var table = props.table,
      selectedField = props.field,
      shouldAllowPickingNone = props.shouldAllowPickingNone,
      allowedTypes = props.allowedTypes,
      placeholder = props.placeholder,
      onChange = props.onChange,
      restOfProps = (0, _objectWithoutProperties2.default)(props, ["table", "field", "shouldAllowPickingNone", "allowedTypes", "placeholder", "onChange"]);
  (0, _use_watchable.default)((0, _get_sdk.default)().base, ['tables']);
  (0, _use_watchable.default)(table, ['fields']);

  if (!table || table.isDeleted) {
    return null;
  }

  function _onChange(fieldId) {
    if (onChange) {
      var field = table && !table.isDeleted && fieldId ? table.getFieldByIdIfExists(fieldId) : null;
      onChange(field);
    }
  }

  var placeholderToUse;

  if (placeholder === undefined) {
    // Let's set a good default value for the placeholder, depending
    // on the shouldAllowPickingNone flag.
    placeholderToUse = shouldAllowPickingNone ? 'None' : 'Pick a field...';
  } else {
    placeholderToUse = placeholder;
  }

  var allowedTypesSet = {};

  if (allowedTypes) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = allowedTypes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var allowedType = _step.value;
        allowedTypesSet[allowedType] = true;
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  var shouldAllowPickingFieldFn = field => {
    return !allowedTypes || (0, _private_utils.has)(allowedTypesSet, field.type);
  }; // Fields are only ordered within a view, and views' column orders aren't
  // loaded by default. So we'll always list the primary field first, followed
  // by the rest of the fields in alphabetical order.


  var models = table.fields.filter(field => field !== table.primaryField).sort((a, b) => {
    return a.name.toLowerCase() < b.name.toLowerCase() ? -1 : 1;
  });
  models.unshift(table.primaryField);
  return React.createElement(_model_picker_select.default, (0, _extends2.default)({}, restOfProps, {
    ref: ref,
    models: models // `shouldAllowPickingModelFn` is typed as `AnyModel`. Cast to any since we only expect `Field`.
    ,
    shouldAllowPickingModelFn: shouldAllowPickingFieldFn,
    selectedModelId: selectedField && !selectedField.isDeleted ? selectedField.id : null,
    modelKeysToWatch: ['name', 'type', 'options'],
    shouldAllowPickingNone: shouldAllowPickingNone,
    placeholder: placeholderToUse,
    onChange: _onChange
  }));
};

var ForwardedRefFieldPicker = React.forwardRef(FieldPicker);
ForwardedRefFieldPicker.displayName = 'FieldPicker';
ForwardedRefFieldPicker.propTypes = _objectSpread({
  field: _propTypes.default.instanceOf(_field.default)
}, sharedFieldPickerPropTypes);
var _default = ForwardedRefFieldPicker;
exports.default = _default;
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.symbol");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.object.get-own-property-descriptors");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var React = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _error_utils = require("../error_utils");

var _table = _interopRequireDefault(require("../models/table"));

var _view = _interopRequireDefault(require("../models/view"));

var _field = _interopRequireDefault(require("../models/field"));

var _select = _interopRequireWildcard(require("./select"));

var _use_watchable = _interopRequireDefault(require("./use_watchable"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function ModelPickerSelect(props, ref) {
  var models = props.models,
      modelKeysToWatch = props.modelKeysToWatch,
      selectedModelId = props.selectedModelId,
      shouldAllowPickingNone = props.shouldAllowPickingNone,
      shouldAllowPickingModelFn = props.shouldAllowPickingModelFn,
      placeholder = props.placeholder,
      onChange = props.onChange,
      restOfProps = (0, _objectWithoutProperties2.default)(props, ["models", "modelKeysToWatch", "selectedModelId", "shouldAllowPickingNone", "shouldAllowPickingModelFn", "placeholder", "onChange"]); // useWatchable has stricter typing than createDataContainer which it replaced, so we can't
  // know that model and modelKeysToWatch are exactly compatible here:

  (0, _use_watchable.default)(models, modelKeysToWatch);

  function _onChange(value) {
    (0, _error_utils.invariant)(value === null || typeof value === 'string', 'value must be null or model id');
    onChange(value);
  }

  var options = [{
    value: null,
    label: placeholder,
    disabled: !shouldAllowPickingNone
  }, ...models.map(model => {
    return {
      value: model.id,
      label: model.name,
      disabled: shouldAllowPickingModelFn && !shouldAllowPickingModelFn(model)
    };
  })];
  return React.createElement(_select.default, (0, _extends2.default)({}, restOfProps, {
    ref: ref,
    value: selectedModelId,
    onChange: _onChange,
    options: options
  }));
}

var ForwardedRefModelPickerSelect = React.forwardRef(ModelPickerSelect);
ForwardedRefModelPickerSelect.displayName = 'ModelPickerSelect';
ForwardedRefModelPickerSelect.propTypes = _objectSpread({
  models: _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.instanceOf(_table.default).isRequired, _propTypes.default.instanceOf(_view.default).isRequired, _propTypes.default.instanceOf(_field.default).isRequired]).isRequired).isRequired,
  selectedModelId: _propTypes.default.string,
  modelKeysToWatch: _propTypes.default.arrayOf(_propTypes.default.string.isRequired).isRequired,
  shouldAllowPickingNone: _propTypes.default.bool,
  shouldAllowPickingModelFn: _propTypes.default.func,
  onChange: _propTypes.default.func.isRequired,
  placeholder: _propTypes.default.string.isRequired
}, _select.sharedSelectBasePropTypes);
var _default = ForwardedRefModelPickerSelect;
exports.default = _default;
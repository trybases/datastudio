"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.symbol");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.object.get-own-property-descriptors");

require("core-js/modules/web.dom-collections.for-each");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.sharedTablePickerPropTypes = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _get_sdk = _interopRequireDefault(require("../get_sdk"));

var _table = _interopRequireDefault(require("../models/table"));

var _select = require("./select");

var _model_picker_select = _interopRequireDefault(require("./model_picker_select"));

var _use_watchable = _interopRequireDefault(require("./use_watchable"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// Shared with `TablePicker` and `TablePickerSynced`.
var sharedTablePickerPropTypes = _objectSpread({
  shouldAllowPickingNone: _propTypes.default.bool,
  placeholder: _propTypes.default.string,
  onChange: _propTypes.default.func
}, _select.sharedSelectBasePropTypes);
/**
 * Props for the {@link TablePicker} component. Also accepts:
 * * {@link SelectStyleProps}
 *
 * @docsPath UI/components/TablePicker
 */


exports.sharedTablePickerPropTypes = sharedTablePickerPropTypes;

/**
 * Dropdown menu component for selecting tables.
 *
 * [[ Story id="modelpickers--tablepicker-example" title="Table picker example" ]]
 *
 * @docsPath UI/components/TablePicker
 * @component
 */
var TablePicker = (props, ref) => {
  var table = props.table,
      shouldAllowPickingNone = props.shouldAllowPickingNone,
      placeholder = props.placeholder,
      onChange = props.onChange,
      restOfProps = (0, _objectWithoutProperties2.default)(props, ["table", "shouldAllowPickingNone", "placeholder", "onChange"]);
  var selectedTable = table && !table.isDeleted ? table : null;
  (0, _use_watchable.default)((0, _get_sdk.default)().base, ['tables']);

  function _onChange(tableId) {
    if (onChange) {
      var newTable = tableId ? (0, _get_sdk.default)().base.getTableByIdIfExists(tableId) : null;
      onChange(newTable);
    }
  }

  var placeholderToUse;

  if (placeholder === undefined) {
    // Let's set a good default value for the placeholder, depending
    // on the shouldAllowPickingNone flag.
    placeholderToUse = shouldAllowPickingNone ? 'None' : 'Pick a table...';
  } else {
    placeholderToUse = placeholder;
  }

  return React.createElement(_model_picker_select.default, (0, _extends2.default)({}, restOfProps, {
    ref: ref,
    models: (0, _get_sdk.default)().base.tables,
    selectedModelId: selectedTable ? selectedTable.id : null,
    modelKeysToWatch: ['name'],
    shouldAllowPickingNone: shouldAllowPickingNone,
    placeholder: placeholderToUse,
    onChange: _onChange
  }));
};

var ForwardedRefTablePicker = React.forwardRef(TablePicker);
ForwardedRefTablePicker.displayName = 'TablePicker';
ForwardedRefTablePicker.propTypes = _objectSpread({
  table: _propTypes.default.instanceOf(_table.default)
}, sharedTablePickerPropTypes);
var _default = ForwardedRefTablePicker;
exports.default = _default;
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.symbol");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.includes");

require("core-js/modules/es.object.get-own-property-descriptors");

require("core-js/modules/web.dom-collections.for-each");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.DialogCloseButton = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _emotion = require("emotion");

var React = _interopRequireWildcard(require("react"));

var _core = require("@styled-system/core");

var _baymax_utils = require("./baymax_utils");

var _with_styled_system = _interopRequireDefault(require("./with_styled_system"));

var _system = require("./system");

var _tooltip_anchor_props = require("./types/tooltip_anchor_props");

var _icon = _interopRequireDefault(require("./icon"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var styleParser = (0, _core.compose)(_system.borderRadius, _system.dimensionsSet, _system.display, _system.flexContainerSet, _system.flexItemSet, _system.positionSet, _system.spacingSet);

var dialogCloseButtonStylePropTypes = _objectSpread({}, _system.borderRadiusPropTypes, {}, _system.dimensionsSetPropTypes, {}, _system.displayPropTypes, {}, _system.flexContainerSetPropTypes, {}, _system.flexItemSetPropTypes, {}, _system.positionSetPropTypes, {}, _system.spacingSetPropTypes);
/**
 * A button that closes {@link Dialog}. Accessed via `Dialog.CloseButton`.
 */
// TODO (stephen): can we alias this as Dialog.CloseButton in typedoc?
// TODO (stephen): convert into a prop in Dialog


var DialogCloseButton =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2.default)(DialogCloseButton, _React$Component);

  /** @hidden */

  /** @hidden */

  /** @hidden */
  function DialogCloseButton(props) {
    var _this;

    (0, _classCallCheck2.default)(this, DialogCloseButton);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(DialogCloseButton).call(this, props));
    _this._onClick = _this._onClick.bind((0, _assertThisInitialized2.default)(_this));
    _this._onKeyDown = _this._onKeyDown.bind((0, _assertThisInitialized2.default)(_this));
    return _this;
  }
  /** @internal */


  (0, _createClass2.default)(DialogCloseButton, [{
    key: "_onClick",
    value: function _onClick(e) {
      // onClick should only be defined in the case of a tooltip.
      if (this.props.onClick) {
        this.props.onClick(e);
      }

      this.context.onDialogClose();
    }
    /** @internal */

  }, {
    key: "_onKeyDown",
    value: function _onKeyDown(e) {
      if (e.ctrlKey || e.altKey || e.metaKey) {
        return;
      }

      if (['Enter', ' '].includes(e.key)) {
        e.preventDefault();
        this.context.onDialogClose();
      }
    }
    /** @hidden */

  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          onMouseEnter = _this$props.onMouseEnter,
          onMouseLeave = _this$props.onMouseLeave,
          className = _this$props.className,
          style = _this$props.style,
          tabIndex = _this$props.tabIndex,
          children = _this$props.children;
      return React.createElement("div", {
        // TODO (stephen): remove tooltip anchor props
        onMouseEnter: onMouseEnter,
        onMouseLeave: onMouseLeave,
        onClick: this._onClick,
        onKeyDown: this._onKeyDown,
        className: (0, _emotion.cx)((0, _baymax_utils.baymax)('darken1-hover darken1-focus no-outline pointer'), className),
        style: style,
        tabIndex: tabIndex || 0,
        role: "button",
        "aria-label": "Close dialog"
      }, children ? children : React.createElement(_icon.default, {
        name: "x",
        size: 12,
        className: (0, _baymax_utils.baymax)('quieter')
      }));
    }
  }]);
  return DialogCloseButton;
}(React.Component);

exports.DialogCloseButton = DialogCloseButton;
(0, _defineProperty2.default)(DialogCloseButton, "propTypes", _objectSpread({
  className: _propTypes.default.string,
  style: _propTypes.default.object,
  tabIndex: _propTypes.default.number,
  children: _propTypes.default.node
}, _tooltip_anchor_props.tooltipAnchorPropTypes));
(0, _defineProperty2.default)(DialogCloseButton, "contextTypes", {
  onDialogClose: _propTypes.default.func
});

var _default = (0, _with_styled_system.default)(DialogCloseButton, styleParser, dialogCloseButtonStylePropTypes, {
  position: 'absolute',
  top: 0,
  right: 0,
  marginTop: 2,
  marginRight: 2,
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
  width: '24px',
  height: '24px',
  borderRadius: 'circle'
});

exports.default = _default;
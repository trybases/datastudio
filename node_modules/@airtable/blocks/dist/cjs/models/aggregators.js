"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.object.to-string");

require("core-js/modules/web.dom-collections.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _get_sdk = _interopRequireDefault(require("../get_sdk"));

var _airtable_interface = _interopRequireDefault(require("../injected/airtable_interface"));

var _error_utils = require("../error_utils");

/** @module @airtable/blocks/models: Aggregators */

/** */
var aggregate = (aggregatorKey, records, field) => {
  if (!field.isAggregatorAvailable(aggregatorKey)) {
    throw (0, _error_utils.spawnError)('The %s aggregator is not available for %s fields', aggregatorKey, field.type);
  }

  var appInterface = (0, _get_sdk.default)().__appInterface;

  var cellValues = records.map(record => record.getCellValue(field));
  return _airtable_interface.default.aggregators.aggregate(appInterface, aggregatorKey, cellValues, field._data);
};

var aggregateToString = (aggregatorKey, records, field) => {
  if (!field.isAggregatorAvailable(aggregatorKey)) {
    throw (0, _error_utils.spawnError)('The %s aggregator is not available for %s fields', aggregatorKey, field.type);
  }

  var appInterface = (0, _get_sdk.default)().__appInterface;

  var cellValues = records.map(record => record.getCellValue(field));
  return _airtable_interface.default.aggregators.aggregateToString(appInterface, aggregatorKey, cellValues, field._data);
};

var aggregators = {};

var aggregatorKeys = _airtable_interface.default.aggregators.getAllAvailableAggregatorKeys();

var _iteratorNormalCompletion = true;
var _didIteratorError = false;
var _iteratorError = undefined;

try {
  for (var _iterator = aggregatorKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
    var _key = _step.value;

    var config = _airtable_interface.default.aggregators.getAggregatorConfig(_key);

    aggregators[_key] = Object.freeze({
      key: _key,
      displayName: config.displayName,
      shortDisplayName: config.shortDisplayName,
      aggregate: aggregate.bind(null, _key),
      aggregateToString: aggregateToString.bind(null, _key)
    });
  }
} catch (err) {
  _didIteratorError = true;
  _iteratorError = err;
} finally {
  try {
    if (!_iteratorNormalCompletion && _iterator.return != null) {
      _iterator.return();
    }
  } finally {
    if (_didIteratorError) {
      throw _iteratorError;
    }
  }
}

Object.freeze(aggregators);
var _default = aggregators;
exports.default = _default;
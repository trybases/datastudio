"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.array.map");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

require("regenerator-runtime/runtime");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _error_utils = require("../error_utils");

var _private_utils = require("../private_utils");

var _object_pool = _interopRequireDefault(require("./object_pool"));

var _abstract_model_with_async_data = _interopRequireDefault(require("./abstract_model_with_async_data"));

/** @module @airtable/blocks/models: View */

/** */
var WatchableViewMetadataKeys = {
  allFields: 'allFields',
  visibleFields: 'visibleFields',
  isDataLoaded: 'isDataLoaded'
};
/**
 * A key in {@link ViewMetadataQueryResult} that can be watched.
 * - `allFields`
 * - `visibleFields`
 * - `isDataLoaded`
 */

var viewMetadataQueryResultPool = new _object_pool.default({
  getKeyFromObject: queryResult => queryResult.parentView.id,
  getKeyFromObjectOptions: (_ref) => {
    var view = _ref.view;
    return view.id;
  },
  canObjectBeReusedForOptions: () => true
});
/**
 * Contains information about a view that isn't loaded by default e.g. field order and visible fields.
 *
 * In a React component, we recommend using {@link useViewMetadata} instead.
 *
 * @example
 * ```js
 * async function loadMetadataForViewAsync(view) {
 *     const viewMetadata = view.selectMetadata();
 *     await viewMetadata.loadDataAsync();
 *
 *     console.log(viewMetadata.visibleField);
 *     // => [Field, Field, Field]
 *
 *     console.log(viewMetadata.allFields);
 *     // => [Field, Field, Field, Field, Field]
 *
 *     viewMetadata.unloadData();
 * }
 * ```
 * @docsPath models/query results/ViewMetadataQueryResult
 */

var ViewMetadataQueryResult =
/*#__PURE__*/
function (_AbstractModelWithAsy) {
  (0, _inherits2.default)(ViewMetadataQueryResult, _AbstractModelWithAsy);
  (0, _createClass2.default)(ViewMetadataQueryResult, null, [{
    key: "_isWatchableKey",

    /** @internal */

    /** @internal */
    value: function _isWatchableKey(key) {
      return (0, _private_utils.isEnumValue)(WatchableViewMetadataKeys, key);
    }
    /** @internal */

  }, {
    key: "_shouldLoadDataForKey",
    value: function _shouldLoadDataForKey(key) {
      return key === WatchableViewMetadataKeys.allFields || key === WatchableViewMetadataKeys.visibleFields;
    }
    /** @internal */

  }, {
    key: "__createOrReuseQueryResult",
    value: function __createOrReuseQueryResult(view, viewDataStore) {
      var queryResult = viewMetadataQueryResultPool.getObjectForReuse({
        view
      });

      if (queryResult) {
        return queryResult;
      }

      return new ViewMetadataQueryResult(view.__baseData, view, viewDataStore);
    }
    /** */

  }]);

  /** @internal */
  function ViewMetadataQueryResult(baseData, parentView, viewDataStore) {
    var _this;

    (0, _classCallCheck2.default)(this, ViewMetadataQueryResult);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ViewMetadataQueryResult).call(this, baseData, (0, _private_utils.getLocallyUniqueId)('ViewMetadataQueryResult')));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "parentView", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_viewDataStore", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_onVisibleFieldIdsChange", () => {
      _this._onChange(WatchableViewMetadataKeys.visibleFields);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_onAllFieldIdsChange", () => {
      _this._onChange(WatchableViewMetadataKeys.allFields);
    });
    _this.parentView = parentView;
    _this._viewDataStore = viewDataStore;
    viewMetadataQueryResultPool.registerObjectForReuseWeak((0, _assertThisInitialized2.default)(_this));
    return _this;
  }
  /** @internal */


  (0, _createClass2.default)(ViewMetadataQueryResult, [{
    key: "_onChangeIsDataLoaded",

    /** @internal */
    value: function _onChangeIsDataLoaded() {
      this._onChange(WatchableViewMetadataKeys.isDataLoaded);
    }
    /** @internal */

  }, {
    key: "_loadDataAsync",
    value: function _loadDataAsync() {
      return _regenerator.default.async(function _loadDataAsync$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return _regenerator.default.awrap(this._viewDataStore.loadDataAsync());

            case 2:
              this._viewDataStore.watch('visibleFieldIds', this._onVisibleFieldIdsChange);

              this._viewDataStore.watch('allFieldIds', this._onAllFieldIdsChange);

              return _context.abrupt("return", [WatchableViewMetadataKeys.allFields, WatchableViewMetadataKeys.visibleFields]);

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
    /** @internal */

  }, {
    key: "_unloadData",
    value: function _unloadData() {
      this._viewDataStore.unwatch('visibleFieldIds', this._onVisibleFieldIdsChange);

      this._viewDataStore.unwatch('allFieldIds', this._onAllFieldIdsChange);

      this._viewDataStore.unloadData();
    }
    /** @internal */

  }, {
    key: "_dataOrNullIfDeleted",
    get: function get() {
      if (this._viewDataStore.isDeleted) {
        return null;
      }

      if (!this._viewDataStore.isDataLoaded) {
        return {
          visibleFieldIds: null,
          allFieldIds: null
        };
      }

      return {
        visibleFieldIds: this._viewDataStore.visibleFieldIds,
        allFieldIds: this._viewDataStore.allFieldIds
      };
    }
  }, {
    key: "allFields",

    /**
     * Returns every field in the table in the order they appear in this view. Watchable.
     */
    get: function get() {
      var allFieldIds = this._data.allFieldIds;
      (0, _error_utils.invariant)(allFieldIds, 'view meta data is not loaded');
      return allFieldIds.map(fieldId => this.parentView.parentTable.getFieldById(fieldId));
    }
    /**
     * Returns every field visible in this view. Watchable.
     */

  }, {
    key: "visibleFields",
    get: function get() {
      var visibleFieldIds = this._data.visibleFieldIds;
      (0, _error_utils.invariant)(visibleFieldIds, 'view meta data is not loaded');
      return visibleFieldIds.map(fieldId => this.parentView.parentTable.getFieldById(fieldId));
    }
  }]);
  return ViewMetadataQueryResult;
}(_abstract_model_with_async_data.default);

(0, _defineProperty2.default)(ViewMetadataQueryResult, "_className", 'ViewMetadataQueryResult');
var _default = ViewMetadataQueryResult;
exports.default = _default;
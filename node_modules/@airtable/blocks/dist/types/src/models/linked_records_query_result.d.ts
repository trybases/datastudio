import { FlowAnyFunction, FlowAnyObject } from '../private_utils';
import RecordQueryResult, { WatchableRecordQueryResultKey } from './record_query_result';
import Field from './field';
import Record from './record';
/**
 * Represents a set of records from a LinkedRecord cell value. See {@link RecordQueryResult} for main
 * documentation.
 *
 * Do not instantiate. You can get instances of this class by calling
 * `record.getLinkedRecordsFromCell`.
 *
 * @docsPath models/query results/LinkedRecordsQueryResult
 */
declare class LinkedRecordsQueryResult extends RecordQueryResult {
    /**
     * Is the query result currently valid? This value always starts as 'true',
     * but can become false if the field config changes to link to a different
     * table or a type other than MULTIPLE_RECORD_LINKS. Once `isValid` has
     * become false, it will never become true again. Many fields will throw on
     * attempting to access them, and watches will no longer fire.
     */
    get isValid(): boolean;
    /**
     * Ordered array of all the linked record ids. Watchable.
     */
    get recordIds(): Array<string>;
    /**
     * Ordered array of all the linked records. Watchable.
     */
    get records(): Array<Record>;
    /**
     * The fields that were used to create this LinkedRecordsQueryResult.
     */
    get fields(): Array<Field> | null;
    /** @inheritdoc */
    watch(keys: WatchableRecordQueryResultKey | ReadonlyArray<WatchableRecordQueryResultKey>, callback: FlowAnyFunction, context?: FlowAnyObject | null): Array<WatchableRecordQueryResultKey>;
    /** @inheritdoc */
    unwatch(keys: WatchableRecordQueryResultKey | ReadonlyArray<WatchableRecordQueryResultKey>, callback: FlowAnyFunction, context?: FlowAnyObject | null): Array<WatchableRecordQueryResultKey>;
    /** @inheritdoc */
    loadDataAsync(): Promise<void>;
}
export default LinkedRecordsQueryResult;
//# sourceMappingURL=linked_records_query_result.d.ts.map
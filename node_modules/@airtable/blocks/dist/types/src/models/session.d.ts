import { CollaboratorData, UserId } from '../types/collaborator';
import { PermissionLevel } from '../types/permission_levels';
import { ObjectValues } from '../private_utils';
import { PermissionCheckResult } from '../types/mutations';
import AbstractModel from './abstract_model';
/** @hidden */
interface SessionData {
    currentUserId: UserId | null;
    permissionLevel: PermissionLevel;
    enabledFeatureNames: Array<string>;
}
declare const WatchableSessionKeys: Readonly<{
    permissionLevel: "permissionLevel";
    currentUser: "currentUser";
}>;
/**
 * Watchable keys in {@link Session}.
 * - `currentUser`
 * - `permissionLevel`
 */
declare type WatchableSessionKey = ObjectValues<typeof WatchableSessionKeys>;
/**
 * Model class representing the current user's session.
 *
 * @example
 * ```js
 * import {session} from '@airtable/blocks';
 *
 * if (session.currentUser !== null) {
 *     console.log("The current user's name is", session.currentUser.name);
 * } else {
 *     console.log('This block is being viewed in a public share');
 * }
 * ```
 * @docsPath models/Session
 */
declare class Session extends AbstractModel<SessionData, WatchableSessionKey> {
    /**
     * The current user, or `null` if the block is running in a publicly shared base.
     *
     * @example
     * ```js
     * import {session} from '@airtable/blocks';
     * if (session.currentUser) {
     *     console.log(session.currentUser.id);
     *     console.log(session.currentUser.email);
     *     console.log(session.currentUser.name);
     * }
     * ```
     */
    get currentUser(): CollaboratorData | null;
    /**
     * Checks whether the current user has permission to update any records in the current base. For
     * more granular permission checks, see {@link Table.checkPermissionsForUpdateRecords}.
     *
     * Returns `{hasPermission: true}` if the current user can update records,
     * `{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may
     * be used to display an error message to the user.
     *
     * @example
     * ```js
     * import {session} from '@airtable/blocks';
     *
     * const updateRecordsCheckResult = session.checkPermissionsForUpdateRecords();
     * if (!updateRecordsCheckResult.hasPermission) {
     *     alert(updateRecordsCheckResult.reasonDisplayString);
     * }
     */
    checkPermissionsForUpdateRecords(): PermissionCheckResult;
    /**
     * An alias for `session.checkPermissionsForUpdateRecords().hasPermission`. For more granular
     * permission checks, see {@link Table.hasPermissionToUpdateRecords}.
     */
    hasPermissionToUpdateRecords(): boolean;
    /**
     * Checks whether the current user has permission to create any records in the current base. For
     * more granular permission checks, see {@link Table.checkPermissionsForCreateRecords}.
     *
     * Returns `{hasPermission: true}` if the current user can create records,
     * `{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be
     * used to display an error message to the user.
     *
     * @example
     * ```js
     * import {session} from '@airtable/blocks';
     *
     * const createRecordsCheckResult = session.checkPermissionsForCreateRecords();
     * if (!createRecordsCheckResult.hasPermission) {
     *     alert(createRecordsCheckResult.reasonDisplayString);
     * }
     */
    checkPermissionsForCreateRecords(): PermissionCheckResult;
    /**
     * An alias for `session.checkPermissionsForCreateRecords().hasPermission`. For more granular
     * permission checks, see {@link Table.hasPermissionToCreateRecords}.
     */
    hasPermissionToCreateRecords(): boolean;
    /**
     * Checks whether the current user has permission to delete any records in the current base. For
     * more granular permission checks, see {@link Table.checkPermissionsForDeleteRecords}.
     *
     * Returns `{hasPermission: true}` if the current user can delete records,
     * `{hasPermission: false, reasonDisplayString: string}` otherwise. `reasonDisplayString` may be
     * used to display an error message to the user.
     *
     * @example
     * ```js
     * import {session} from '@airtable/blocks';
     *
     * const deleteRecordsCheckResult = session.checkPermissionsForDeleteRecords();
     * if (!deleteRecordsCheckResult.hasPermission) {
     *     alert(deleteRecordsCheckResult.reasonDisplayString);
     * }
     */
    checkPermissionsForDeleteRecords(): PermissionCheckResult;
    /**
     * An alias for `session.checkPermissionsForDeleteRecords().hasPermission`. For more granular
     * permission checks, see {@link Table.hasPermissionToDeleteRecords}.
     */
    hasPermissionToDeleteRecords(): boolean;
}
export default Session;
//# sourceMappingURL=session.d.ts.map
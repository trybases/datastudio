/** @hidden */ /** */
import PropTypes from 'prop-types';
import * as React from 'react';
import { GlobalConfigKey, GlobalConfigValue } from '../types/global_config';
/** @hidden */
interface SyncedProps {
    globalConfigKey: GlobalConfigKey;
    render: (arg1: {
        value: unknown;
        canSetValue: boolean;
        setValue: (newValue: GlobalConfigValue | undefined) => void;
    }) => React.ReactElement;
}
/** @hidden */
export declare class Synced extends React.Component<SyncedProps> {
    /** @hidden */
    static propTypes: {
        globalConfigKey: PropTypes.Validator<string | string[]>;
        render: PropTypes.Validator<(...args: any[]) => any>;
    };
    /** @hidden */
    constructor(props: SyncedProps);
    /** @hidden */
    render(): React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>;
}
declare const _default: React.RefForwardingComponent<Synced, Pick<SyncedProps, "globalConfigKey" | "render"> & React.RefAttributes<Synced>>;
export default _default;
//# sourceMappingURL=synced.d.ts.map
/** @module @airtable/blocks/ui: RecordCard */ /** */
import PropTypes from 'prop-types';
import * as React from 'react';
import { RecordDef } from '../types/record';
import Field from '../models/field';
import Record from '../models/record';
import View from '../models/view';
import { ExpandRecordOpts } from './expand_record';
import { FlexItemSetProps, PositionSetProps, MarginProps } from './system';
/**
 * Style props for the {@link RecordCard} component. Accepts:
 * * {@link FlexItemSetProps}
 * * {@link MarginProps}
 * * {@link PositionSetProps}
 *
 * @noInheritDoc
 */
interface RecordCardStyleProps extends FlexItemSetProps, PositionSetProps, MarginProps {
}
export declare const recordCardStylePropTypes: {
    [x: string]: PropTypes.Validator<any>;
};
/**
 * Props for the {@link RecordCard} component. Also accepts:
 * * {@link RecordCardStyleProps}
 *
 * @noInheritDoc
 * @docsPath UI/components/RecordCard
 */
interface RecordCardProps extends RecordCardStyleProps {
    /** Record to display in the card. */
    record: Record | RecordDef;
    /** The view model to use for field order and record coloring. */
    view?: View;
    /** Attachment field to display as an image in the square preview for the card. If omitted or not an attachment field, it uses for the first attachment field in `fields`. If `fields` is not defined, it uses the first attachment field in the view. */
    attachmentCoverField?: Field;
    /** Width of the record card. */
    width?: number;
    /** Height of the record card. */
    height?: number;
    /** Options object for expanding a record. */
    expandRecordOptions?: ExpandRecordOpts | null;
    /** Fields to display in the card. The primary field is always displayed. */
    fields?: Array<Field>;
    /** Mouse enter event handler for the record card. */
    onMouseEnter?: ((e: React.MouseEvent<HTMLAnchorElement>) => unknown) | null;
    /** Mouse leave event handler for the record card. */
    onMouseLeave?: ((e: React.MouseEvent<HTMLAnchorElement>) => unknown) | null;
    /** Click event handler for the record card. If undefined, uses default behavior to expand record. If null, no operation is performed. */
    onClick?: ((e: React.MouseEvent<HTMLAnchorElement>) => unknown) | null;
    /** @hidden */
    hasOnClick?: boolean;
    /** Additional class names to apply to the record card. */
    className?: string;
    /** Additional styles to apply to the record card. */
    style?: React.CSSProperties;
}
/**
 * A card component that displays an Airtable record.
 *
 * [[ Story id="recordcard--example" title="RecordCard example" ]]
 *
 * @docsPath UI/components/RecordCard
 * @component
 */
export declare class RecordCard extends React.Component<RecordCardProps> {
    /** @hidden */
    static propTypes: {
        onMouseEnter: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseLeave: PropTypes.Requireable<(...args: any[]) => any>;
        onClick: PropTypes.Requireable<(...args: any[]) => any>;
        hasOnClick: PropTypes.Requireable<boolean>;
        record: PropTypes.Requireable<object>;
        fields: PropTypes.Requireable<Field[]>;
        view: PropTypes.Requireable<View>;
        attachmentCoverField: PropTypes.Requireable<Field>;
        width: PropTypes.Requireable<number>;
        height: PropTypes.Requireable<number>;
        className: PropTypes.Requireable<string>;
        style: PropTypes.Requireable<object>;
        expandRecordOptions: PropTypes.Requireable<object>;
    };
    /** @hidden */
    static defaultProps: {
        width: number;
        height: number;
        className: string;
        style: {};
    };
    /** @hidden */
    constructor(props: RecordCardProps);
    /** @hidden */
    UNSAFE_componentWillReceiveProps(nextProps: RecordCardProps): void;
    /** @hidden */
    render(): JSX.Element | null;
}
declare const _default: React.RefForwardingComponent<RecordCard, Pick<RecordCardProps, "left" | "right" | "top" | "bottom" | "style" | "view" | "flex" | "alignSelf" | "flexBasis" | "flexGrow" | "flexShrink" | "height" | "justifySelf" | "marginBottom" | "marginLeft" | "marginRight" | "marginTop" | "order" | "position" | "width" | "zIndex" | "margin" | "className" | "onClick" | "onMouseEnter" | "onMouseLeave" | "fields" | "record" | "marginX" | "marginY" | "hasOnClick" | "attachmentCoverField" | "expandRecordOptions"> & React.RefAttributes<RecordCard>>;
export default _default;
//# sourceMappingURL=record_card.d.ts.map
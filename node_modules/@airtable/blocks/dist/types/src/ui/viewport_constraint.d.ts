/**
 * @module @airtable/blocks/ui: ViewportConstraint
 * @docsPath UI/components/ViewportConstraint
 */ /** */
import PropTypes from 'prop-types';
import * as React from 'react';
import { ViewportSizeConstraint } from '../types/viewport';
/** An object specifying a width and/or height for the block's viewport. */
declare type ViewportSizeConstraintProp = Partial<ViewportSizeConstraint>;
/**
 * Props for the {@link ViewportConstraint} component.
 *
 * @docsPath UI/components/ViewportConstraint
 */
interface ViewportConstraintProps {
    /** The minimum viewport size of the block. */
    minSize?: ViewportSizeConstraintProp;
    /** The maximum viewport size of the block when it is in fullscreen mode. */
    maxFullscreenSize?: ViewportSizeConstraintProp;
    /** The contents of the viewport constraint. */
    children?: React.ReactNode;
}
/**
 * When mounted, this wrapper component applies size constraints to the {@link Viewport}.
 * Like {@link addMinSize}, this will fullscreen the block if necessary and possible when
 * `minSize` is updated.
 *
 * @example
 * ```js
 * import {ViewportConstraint} from '@airtable/blocks/ui';
 * <ViewportConstraint minSize={{width: 400}} />
 * ```
 *
 * @example
 * ```js
 * import {ViewportConstraint} from '@airtable/blocks/ui';
 * <ViewportConstraint maxFullScreenSize={{width: 600, height: 400}}>
 *      <div>I need a max fullscreen size!</div>
 * </ViewportConstraint>
 * ```
 * @docsPath UI/components/ViewportConstraint
 * @component
 */
declare class ViewportConstraint extends React.Component<ViewportConstraintProps> {
    /** @hidden */
    static propTypes: {
        minSize: PropTypes.Requireable<PropTypes.InferProps<{
            width: PropTypes.Requireable<number>;
            height: PropTypes.Requireable<number>;
        }>>;
        maxFullscreenSize: PropTypes.Requireable<PropTypes.InferProps<{
            width: PropTypes.Requireable<number>;
            height: PropTypes.Requireable<number>;
        }>>;
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
    };
    /** @hidden */
    componentDidMount(): void;
    /** @hidden */
    shouldComponentUpdate(nextProps: ViewportConstraintProps): boolean;
    /** @hidden */
    componentDidUpdate(prevProps: ViewportConstraintProps): void;
    /** @hidden */
    componentWillUnmount(): void;
    /** @hidden */
    render(): JSX.Element;
}
export default ViewportConstraint;
//# sourceMappingURL=viewport_constraint.d.ts.map
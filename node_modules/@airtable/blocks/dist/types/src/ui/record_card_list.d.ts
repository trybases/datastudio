/** @module @airtable/blocks/ui: RecordCardList */ /** */
import PropTypes from 'prop-types';
import * as React from 'react';
import { RecordDef } from '../types/record';
import Record from '../models/record';
import Field from '../models/field';
import View from '../models/view';
import { DimensionsSetProps, FlexItemSetProps, PositionSetProps, MarginProps } from './system';
/**
 * Scroll event for {@link RecordCardList}.
 */
interface RecordCardListScrollEvent {
    /** The direction of the scroll event. */
    scrollDirection: 'forward' | 'backward';
    /** The vertical offset of the scrollable area. */
    scrollOffset: number;
    /** `true` for programmatic scrolling and `false` if the scroll was the result of a user interaction in the browser. */
    scrollUpdateWasRequested: boolean;
}
/**
 * Props for the {@link RecordCardList} component. Also accepts:
 * * {@link RecordCardListStyleProps}
 *
 * @docsPath UI/components/RecordCardList
 */
interface RecordCardListProps {
    /** Records to display in card list. */
    records: Array<Record> | Array<RecordDef>;
    /** Scroll event handler for the list window. */
    onScroll?: (scrollEvent: RecordCardListScrollEvent) => void;
    /** Click event handler for an individual record card. If undefined, uses default behavior to expand record. If null, no operation is performed. */
    onRecordClick?: null | ((record: Record | RecordDef, index: number) => void);
    /** Mouse enter event handler for an individual record card. */
    onRecordMouseEnter?: (record: Record | RecordDef, index: number) => void;
    /** Mouse leave event handler for an individual record card. */
    onRecordMouseLeave?: (record: Record | RecordDef, index: number) => void;
    /** Fields to display in each record card. The primary field is always displayed. */
    fields?: Array<Field>;
    /** The view model to use for field order and record coloring. */
    view?: View;
    /** Attachment field to display as an image in the square preview for each record card. If omitted or not an attachment field, it uses for the first attachment field in `fields`. If `fields` is not defined, it uses the first attachment field in the view. */
    attachmentCoverField?: Field;
    /** Additional class names to apply to the record card list. */
    className?: string;
    /** Additional styles to apply to the record card list. */
    style?: React.CSSProperties;
}
/**
 * Style props for the {@link RecordCardList} component. Accepts:
 * * {@link DimensionsSetProps}
 * * {@link FlexItemSetProps}
 * * {@link MarginProps}
 * * {@link PositionSetProps}
 *
 * @noInheritDoc
 */
interface RecordCardListStyleProps extends DimensionsSetProps, FlexItemSetProps, PositionSetProps, MarginProps {
}
export declare const recordCardListStylePropTypes: {
    [x: string]: PropTypes.Validator<any>;
};
/** @hidden */
interface RecordCardListState {
    cardListWidth: number;
    cardListHeight: number;
    isScrollbarVisible: boolean;
}
/**
 * Scrollable list of record cards.
 *
 * [[ Story id="recordcardlist--example" title="RecordCardList example" height="560px" ]]
 *
 * @docsPath UI/components/RecordCardList
 * @component
 */
export declare class RecordCardList extends React.Component<RecordCardListProps, RecordCardListState> {
    /** @hidden */
    static propTypes: {
        records: PropTypes.Validator<(object | null | undefined)[]>;
        onScroll: PropTypes.Requireable<(...args: any[]) => any>;
        onRecordClick: PropTypes.Requireable<(...args: any[]) => any>;
        onRecordMouseEnter: PropTypes.Requireable<(...args: any[]) => any>;
        onRecordMouseLeave: PropTypes.Requireable<(...args: any[]) => any>;
        fields: PropTypes.Requireable<Field[]>;
        view: PropTypes.Requireable<View>;
        attachmentCoverField: PropTypes.Requireable<Field>;
        className: PropTypes.Requireable<string>;
        style: PropTypes.Requireable<object>;
    };
    /** @hidden */
    constructor(props: RecordCardListProps);
    /** @hidden */
    componentDidMount(): void;
    /** @hidden */
    componentWillUnmount(): void;
    /** @hidden */
    componentDidUpdate(prevProps: RecordCardListProps): void;
    /** @hidden */
    scrollToRecordAtIndex(recordIndex: number): void;
    /** @hidden */
    render(): JSX.Element;
}
declare const _default: React.RefForwardingComponent<RecordCardList, RecordCardListProps & RecordCardListStyleProps & React.RefAttributes<RecordCardList>>;
export default _default;
//# sourceMappingURL=record_card_list.d.ts.map
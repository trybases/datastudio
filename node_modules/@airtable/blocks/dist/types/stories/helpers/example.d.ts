import React from 'react';
interface SelectOption {
    type: 'select';
    label: string;
    options: Array<string | number>;
    defaultValue?: string | number;
    renderLabel?: (label: string) => string;
}
interface SelectButtonsOption {
    type: 'selectButtons';
    label: string;
    options: Array<string | number>;
    defaultValue?: string | number;
    renderLabel?: (label: string) => string;
}
interface SwitchOption {
    type: 'switch';
    label: string;
    defaultValue?: boolean;
}
declare type ArrayType<T extends Array<any>> = T extends Array<infer U> ? U : never;
declare type OptionType<T extends Option> = T extends SelectOption ? ArrayType<T['options']> : T extends SwitchOption ? boolean : T extends SelectButtonsOption ? ArrayType<T['options']> : never;
declare type Option = SelectOption | SwitchOption | SelectButtonsOption;
interface OptionMap {
    [key: string]: Option;
}
declare type OptionMapType<T extends OptionMap> = {
    [K in keyof T]: OptionType<T[K]>;
};
interface Props<T extends OptionMap> {
    options?: T;
    styleProps?: Array<string>;
    children: (values: OptionMapType<T>) => React.ReactNode;
    renderCodeFn?: (values: OptionMapType<T>) => string;
    containerPadding?: number;
}
export default function Example<T extends OptionMap>(props: Props<T>): JSX.Element;
export {};
//# sourceMappingURL=example.d.ts.map